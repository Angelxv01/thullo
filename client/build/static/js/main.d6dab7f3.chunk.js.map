{"version":3,"sources":["utils/localStorage.ts","graphql/query.ts","utils/formatting.ts","components/common/Avatar.tsx","style/Utils.tsx","components/common/Button.tsx","components/common/InputGroup.tsx","components/common/Label.tsx","components/common/Text.tsx","components/common/TextArea.tsx","style/Icons.tsx","components/Avatars/index.tsx","components/Infobar/StyledInfobar.ts","components/common/InfoLabel.tsx","hooks/useTextArea.ts","components/User/index.tsx","graphql/mutation.ts","hooks/useVisiblity.ts","hooks/useContent.ts","components/Menu/index.tsx","components/Toggle/index.tsx","gqlTypes.ts","components/InviteFriend/StyledFriendFlow.tsx","components/InviteFriend/index.tsx","components/Infobar/InviteFriendModal.tsx","components/VisibilityCard/StyledCard.tsx","components/VisibilityCard/Card.tsx","components/VisibilityCard/index.tsx","assets/Logo.svg","components/Infobar/Badge.tsx","components/Infobar/VisibilityModal.tsx","components/Infobar/index.tsx","components/Card/Utils.tsx","components/Card/StyledCard.tsx","components/CardModal/Header.tsx","style/theme.ts","components/CardModal/DescriptionSection.tsx","components/CardModal/Comment.tsx","components/CardModal/CommentSection.tsx","components/CardModal/AttachmentCover.tsx","utils/downloader.ts","components/CardModal/Attachment.tsx","components/CardModal/AttachmentSection.tsx","components/CardModal/Main.tsx","hooks/useInput.ts","components/CardModal/CoverModal.tsx","utils/config.ts","components/CardModal/LabelModal.tsx","components/CardModal/Aside.tsx","components/CardModal/index.tsx","components/Card/index.tsx","components/ListOperation/StyledListOperation.tsx","components/ListOperation/index.tsx","components/List/ListOperationModal.tsx","components/List/Header.tsx","components/List/NewCard.tsx","components/List/StyledList.tsx","components/List/index.tsx","components/Kanban/StyledKanban.ts","components/Kanban/NewList.tsx","components/Kanban/index.tsx","components/Navigation/StyledNavigation.ts","components/Navigation/Separator.tsx","hooks/useUser.ts","components/Navigation/index.tsx","pages/Board.tsx","pages/Login.tsx","components/Board/index.tsx","pages/Home.tsx","App.tsx","style/global.ts","utils/apolloClient.ts","index.tsx"],"names":["loadState","state","serializedState","localStorage","getItem","JSON","parse","err","saveState","stringifyState","stringify","setItem","MASTER","gql","CARD","FRIENDS_NOT_IN_BOARD","ALL_BOARDS","ME","isString","input","String","formatDate","Date","toLocaleString","year","month","day","getAbbreviation","split","reduce","acc","word","substring","toUpperCase","StyledAvatar","styled","img","theme","border","radius","TextAvatar","div","color","WHITE","GRAY4","Avatar","id","username","src","Flex","space","Flow","Absolute","Relative","Colored","button","backgroundColor","BLUE1","lineHeight","Outline","StyledIcon","GRAY3","font","size","Icon","props","children","as","Squared","IconColored","StyledInput","DARK","width","InputGroup","wrapper","Label","family","secondary","Text","p","fontFamily","fontSize","fontWeight","StyledTextArea","copy","TextArea","divRef","textAreaRef","specialStyle","other","setValue","ref","Apps","className","Lock","MoreHoriz","Public","ArrowDropDown","Add","Close","AttachFile","Comment","AccountCircle","Description","Edit","Search","People","Image","Delete","Logout","Avatars","members","style","alignItems","map","avatar","StyledInfoLabel","InfoLabel","text","useTextArea","init","useState","value","useRef","useEffect","current","dataset","replicatedValue","onChange","e","target","User","user","selected","onClick","useTheme","base","padding","borderRadius","CHANGE_LIST","CREATE_CARD","CREATE_LIST","CHANGE_VISIBILITY","CHANGE_DESCRIPTION","CHANGE_TITLE","CREATE_BOARD","DELETE_USER","INVITE_USER","CHANGE_LIST_NAME","DELETE_LIST","CREATE_COMMENT","ADD_MEMBER","ADD_LABEL","CREATE_LABEL","CREATE_FILE_ATTACHMENT","REMOVE_ATTACHMENT","REMOVE_CARD","LOGIN","EDIT_COMMENT","DELETE_COMMENT","useVisibility","visibility","setVisibility","toggleVisibility","useContent","content","valueRef","onSave","onCancel","StyledMenu","StyledMenuWrapper","z","MENU","StyledSeparator","hr","GRAY5","EditTextArea","css","NormalTextArea","MadeBy","owner","date","useParams","contentController","textAreaController","edit","setEdit","useMutation","refetchQueries","query","variables","changeDescription","disabled","boardData","description","cursor","Team","boardId","ctx","useQuery","fetchPolicy","deleteUser","data","board","find","member","authorizedUser","isAdmin","role","justifyContent","userId","Menu","toggle","createdAt","title","Toggle","React","forwardRef","visible","setVisible","Button","Child","useImperativeHandle","displayName","Visibility","Role","Color","InviteFriend","action","setSelected","useLazyQuery","getFriends","loading","error","friendsNotInBoard","minWidth","placeholder","StyledFriendFlow","length","friend","indexOf","filter","obj","handleSelectUser","textAlign","marginTop","InviteFriendModal","ToggleStyle","zIndex","HEADER_POPUP","boxShadow","inviteUser","Card","StyledCard","_path","_path2","_path3","VisibilityCard","changeVisibility","handleChangeVisibility","Gql","PUBLIC","PRIVATE","Private","VisibilityBadge","prop","StyledVisibilityModal","VisibilityModal","Infobar","StyledInfobar","Cover","ratio","Title","Labels","StatusBar","draggingStyle","isDragging","url","StyledHeader","hasCover","Header","card","changeTitle","Boolean","coverId","contentEditable","suppressContentEditableWarning","onBlur","listId","list","outerText","name","WHITE1","GREEN1","YELLOW","ORANGE","RED","BLUE3","GREEN3","GRAY1","GRAY2","normal","BASE","BOARD_POPUP","CARD_POPUP","DescriptionSection","descriptionController","descriptionStyle","StyledComment","comment","isAuthor","cardId","commentDate","editComment","deleteComment","commentId","onFocus","StyledCommentForm","StyledCommentFlow","CommentSection","comments","cardAuthor","commentController","createComment","StyledImageCover","StyledTextCover","AttachmentCover","download","path","a","axios","method","responseType","response","contentType","headers","window","URL","createObjectURL","Blob","type","link","document","createElement","href","setAttribute","body","appendChild","click","revokeObjectURL","removeChild","StyledAttachment","Attachment","attachment","removeAttachment","filename","StyledFileInput","AttachmentSection","attachments","createAttachment","setState","undefined","validity","valid","files","item","file","Main","flex","author","useInput","CoverModal","addCover","photoFilterController","useDebounce","auth","Authorization","process","photos","setPhotos","console","log","get","then","urls","display","gridTemplateColumns","gap","photo","regular","backgroundPosition","backgroundImage","thumb","aspectRatio","previewDefault","LabelModal","available","active","addLabel","createLabel","preview","setPreview","addLabelHandler","position","outline","grid","Object","keys","label","paddingTop","Members","showMember","setShowMember","StyledInviteMemberWrapper","CardMemberList","showAddMember","setShowAddMember","addMember","ids","Aside","removeCardHandler","showLabel","setShowLabel","showCover","setShowCover","labelIds","labels","availableLabels","CardModal","setCard","removeCard","margin","inset","overflowY","CardWrapper","index","draggableId","provided","snapshot","draggableProps","dragHandleProps","innerRef","GrayText","ListOperation","rename","setRename","controller","changeListName","deleteList","StyledListOperation","ListOperationModal","StyledNewCard","NewCard","create","POPUP","List","newCard","setNewCard","StyledList","droppableId","droppableProps","cards","main","NewList","inputController","createList","Kanban","changeList","onDragEnd","result","destination","StyledKanban","lists","_extends","assign","i","arguments","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgLogo","_ref","svgRef","titleId","height","viewBox","fill","xmlns","d","ForwardRef","nav","StyledHr","useUser","Navigation","apolloClient","useApolloClient","navigate","useNavigate","searchController","StyledNavigation","Separator","justifySelf","gridColumn","removeItem","resetStore","Container","Board","LoginContainer","Grid","Login","usernameController","passwordController","setError","showError","clearTimeout","setTimeout","login","loginHandler","password","errors","StyledBoard","slice","StyledCreateBoardModal","CreateBoardModal","cover","setCover","titleController","boardVisibility","setBoardVisibility","createBoard","Home","pointerEvents","minHeight","flexWrap","allBoards","App","element","createGlobalStyle","uploadLink","createUploadLink","uri","PORT","setContext","_","token","authorization","client","ApolloClient","concat","cache","InMemoryCache","ReactDOM","render","Theme","ApolloProvider","querySelector"],"mappings":"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","file":"static/js/main.d6dab7f3.chunk.js","sourcesContent":["export const loadState = (\n  state: string\n): Record<string, unknown> | undefined => {\n  try {\n    const serializedState = localStorage.getItem(state);\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n};\n\nexport const saveState = (\n  state: string,\n  serializedState: Record<string, unknown>\n) => {\n  const stringifyState = JSON.stringify(serializedState);\n  localStorage.setItem(state, stringifyState);\n};\n\nexport const removeState = (state: string) => {\n  localStorage.removeItem(state);\n};\n","import { gql } from \"@apollo/client\";\nimport * as Gql from \"../gqlTypes\";\n\nexport const MASTER = gql`\n  query MASTER($id: ID!) {\n    authorizedUser {\n      id\n      avatar\n      username\n      friends {\n        username\n        id\n        avatar\n      }\n    }\n    board(id: $id) {\n      title\n      description\n      visibility\n      createdAt\n      labels {\n        color\n        id\n        text\n      }\n      lists {\n        id\n        name\n        cards {\n          coverId\n          id\n          title\n          members {\n            username\n            avatar\n          }\n          labels {\n            id\n            text\n            color\n          }\n          comments {\n            id\n          }\n          attachments {\n            title\n          }\n        }\n      }\n      members {\n        role\n        user {\n          id\n          username\n          avatar\n        }\n      }\n    }\n  }\n`;\n\nexport const CARD = gql`\n  query CARD($id: ID!) {\n    card(id: $id) {\n      description\n      list {\n        id\n      }\n      coverId\n      id\n      title\n      list {\n        name\n      }\n      members {\n        username\n        avatar\n        id\n      }\n      labels {\n        id\n        text\n        color\n      }\n      comments {\n        user {\n          username\n          id\n          avatar\n        }\n        id\n        text\n        createdAt\n      }\n      attachments {\n        id\n        filename\n        title\n        createdAt\n        coverId\n      }\n      author {\n        id\n        avatar\n        username\n      }\n    }\n  }\n`;\n\nexport const FILE = gql`\n  query {\n    getAllAttachments {\n      title\n    }\n  }\n`;\n\nexport interface Data {\n  board: Gql.Board;\n  authorizedUser: Gql.User;\n}\n\nexport interface Var {\n  id: string;\n}\n\nexport const FRIENDS_NOT_IN_BOARD = gql`\n  query FRIENDS_NOT_IN_BOARD($id: ID) {\n    friendsNotInBoard(id: $id) {\n      id\n      username\n      avatar\n    }\n  }\n`;\n\nexport const ALL_BOARDS = gql`\n  query ALL_BOARDS {\n    allBoards {\n      id\n      coverId\n      title\n      members {\n        user {\n          avatar\n          id\n          username\n        }\n      }\n    }\n  }\n`;\n\nexport const ME = gql`\n  query ME {\n    authorizedUser {\n      id\n      avatar\n      username\n      friends {\n        username\n        id\n        avatar\n      }\n    }\n  }\n`;\n","const isString = (input: unknown): input is string => {\n  return typeof input === \"string\" || input instanceof String;\n};\n\nexport const formatDate = (input: unknown) =>\n  isString(input)\n    ? new Date(input).toLocaleString(\"en-GB\", {\n        year: \"numeric\",\n        month: \"short\",\n        day: \"numeric\",\n      })\n    : \"\";\nexport const getAbbreviation = (input: unknown) =>\n  isString(input)\n    ? input\n        .split(\" \")\n        .reduce((acc, word) => (acc += word[0]), \"\")\n        .substring(0, 2)\n        .toUpperCase()\n    : \"\";\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { getAbbreviation } from \"../../utils/formatting\";\n\nconst StyledAvatar = styled.img`\n  width: 2rem;\n  aspect-ratio: 1;\n  border-radius: ${({ theme }) => theme.border.radius[1]};\n  cursor: pointer;\n`;\n\nconst TextAvatar = styled.div`\n  width: 2rem;\n  aspect-ratio: 1;\n  display: grid;\n  place-items: center;\n  color: hsl(${({ theme }) => theme.color.WHITE});\n  background-color: hsl(${({ theme }) => theme.color.GRAY4});\n  border-radius: ${({ theme }) => theme.border.radius[1]};\n  cursor: pointer;\n`;\n\nconst Avatar = ({ id, username }: { id?: string; username: string }) => {\n  if (!id) return <TextAvatar>{getAbbreviation(username)}</TextAvatar>;\n  return <StyledAvatar src={`https://source.unsplash.com/${id}/150x150`} />;\n};\n\nexport default Avatar;\n","import styled from \"styled-components\";\n\ninterface Spacing {\n  space?: string;\n}\n\nexport const Flex = styled.div<Spacing>`\n  display: flex;\n  gap: ${({ space }) => space || \"1rem\"};\n`;\nexport const Grid = styled.div<Spacing>`\n  display: grid;\n  gap: ${({ space }) => space || \"1rem\"};\n`;\nexport const Flow = styled.div<Spacing>`\n  & > *:where(:not(:first-child)) {\n    margin-top: ${({ space }) => space || \"1rem\"};\n  }\n`;\nexport const ReaderOnly = styled.div`\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap; /* added line */\n  border: 0;\n`;\nexport const Absolute = styled.div`\n  position: absolute;\n`;\nexport const Relative = styled.div`\n  position: relative;\n`;\n","import React, { ButtonHTMLAttributes } from \"react\";\nimport styled from \"styled-components\";\nimport { Flex } from \"../../style/Utils\";\n\nexport interface Color {\n  color?: string;\n  backgroundColor?: string;\n}\n\nexport const Colored = styled.button<Color>`\n  cursor: pointer;\n  border-radius: ${({ theme }) => theme.border.radius[1]};\n  background-color: hsl(\n    ${({ backgroundColor, theme }) =>\n      backgroundColor && theme.color[backgroundColor]\n        ? theme.color[backgroundColor]\n        : theme.color.BLUE1}\n  );\n  color: hsl(${({ theme }) => theme.color.WHITE});\n  border: 0;\n  line-height: ${({ theme }) => theme.lineHeight[0]};\n\n  /* &:hover {\n    background-color: hsl(${({ theme }) => theme.color.WHITE});\n    color: hsl(\n      ${({ color, theme }) =>\n    (color && theme.color[color]) || theme.color.BLUE1}\n    );\n  } */\n`;\n\nexport const Outline = styled(Colored)`\n  font-size: 10px;\n  gap: 0.25em;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border-radius: ${({ theme }) => theme.border.radius[1]};\n  color: hsl(${({ theme }) => theme.color.WHITE});\n  line-height: ${({ theme }) => theme.lineHeight[0]};\n\n  background-color: hsl(${({ theme }) => theme.color.WHITE});\n  color: hsl(\n    ${({ color, theme }) => (color && theme.color[color]) || theme.color.BLUE1}\n  );\n  border: hsl(\n      ${({ color, theme }) =>\n        (color && theme.color[color]) || theme.color.BLUE1}\n    )\n    1px solid;\n`;\n\nconst StyledIcon = styled.button`\n  cursor: pointer;\n  border-radius: ${({ theme }) => theme.border.radius[1]};\n  border: 0;\n  cursor: pointer;\n  color: hsl(${({ theme }) => theme.color.GRAY3});\n\n  & > * {\n    padding: 0.5em 1em;\n  }\n\n  &,\n  & .material-icons {\n    font-size: ${({ theme }) => theme.font.size[\"300\"]};\n    line-height: ${({ theme }) => theme.lineHeight[0]};\n  }\n`;\n\nexport const Icon = (props: ButtonHTMLAttributes<HTMLButtonElement>) => {\n  const { children, ...button } = props;\n\n  return (\n    <StyledIcon {...button}>\n      <Flex as=\"span\" space=\"0.5rem\">\n        {children}\n      </Flex>\n    </StyledIcon>\n  );\n};\n\nexport const Squared = styled.button<Color>`\n  // flex: 1;\n  padding: 0;\n  display: grid;\n  place-items: center;\n  cursor: pointer;\n  border-radius: ${({ theme }) => theme.border.radius[1]};\n  outline: none;\n  width: 2rem;\n  aspect-ratio: 1;\n  border: 0;\n  color: hsl(\n    ${({ theme, color }) =>\n      color && theme.color[color] ? theme.color[color] : theme.color.WHITE}\n  );\n  background-color: hsl(\n    ${({ theme, color }) =>\n      color && theme.color[color] ? theme.color[color] : theme.color.BLUE1}\n  );\n`;\n\nexport const IconColored = styled.button<Color>`\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  flex: 0;\n  align-items: center;\n  cursor: pointer;\n  border: 0;\n  padding: 0.5em 1em;\n  border-radius: ${({ theme }) => theme.border.radius[1]};\n  background-color: hsl(\n    ${({ theme, backgroundColor }) =>\n      backgroundColor && theme.color[backgroundColor]\n        ? theme.color[backgroundColor] + \"/ 0.2\"\n        : theme.color.BLUE1 + \"/ 0.2\"}\n  );\n\n  &,\n  & > * {\n    color: hsl(\n      ${({ theme, color }) =>\n        color && theme.color[color] ? theme.color[color] : theme.color.BLUE1}\n    );\n  }\n`;\n","import React, { HTMLAttributes } from \"react\";\nimport styled from \"styled-components\";\n\ninterface Size {\n  width?: string;\n  height?: string;\n}\n\nconst StyledInput = styled.div<Size>`\n  font-size: ${({ theme }) => theme.font.size[200]};\n  line-height: ${({ theme }) => theme.lineHeight[0]};\n  padding: 0.125em;\n  background-color: hsl(${({ theme }) => theme.color.WHITE});\n  border-radius: ${({ theme }) => theme.border.radius[1]};\n  filter: drop-shadow(\n    0px 4px 12px hsl(${({ theme }) => theme.color.DARK} / 0.1)\n  );\n  width: ${({ width }) => width || \"33.33%\"};\n  display: flex;\n\n  & > input {\n    flex: 1;\n    border: 0;\n    border-radius: ${({ theme }) => theme.border.radius[1]};\n    padding: 0.75em;\n    outline: none;\n  }\n`;\n\nconst InputGroup = ({\n  children,\n  width,\n  props,\n  wrapper,\n}: {\n  children?: React.ReactChild;\n  width?: Size[\"width\"];\n  props?: HTMLAttributes<HTMLInputElement>;\n  wrapper?: HTMLAttributes<HTMLDivElement>;\n}) => {\n  return (\n    <StyledInput width={width} {...wrapper}>\n      <input {...props} />\n      {children}\n    </StyledInput>\n  );\n};\n\nexport default InputGroup;\n","import styled from \"styled-components\";\n\ninterface ILabelStyle {\n  color?: string;\n}\n\nconst Label = styled.div<ILabelStyle>`\n  font-family: ${({ theme }) => theme.font.family.secondary};\n  font-size: ${({ theme }) => theme.font.size[200]};\n  border-radius: ${({ theme }) => theme.border.radius[1]};\n  padding: 0.2em 1em;\n  line-height: ${({ theme }) => theme.lineHeight[0]};\n  color: hsl(${({ color, theme }) => theme.color[color || \"BLUE1\"]});\n  background-color: hsl(\n    ${({ color, theme }) =>\n        color && theme.color[color] ? theme.color[color] : theme.color.BLUE1} /\n      0.2\n  );\n  cursor: pointer;\n  text-transform: capitalize;\n`;\n\nexport default Label;\n","import styled from \"styled-components\";\n\ninterface ITextStyle {\n  fontFamily?: string;\n  fontSize?: string;\n  fontWeight?: string;\n  lineHeight?: string;\n  color?: string;\n}\n\nconst Text = styled.p<ITextStyle>`\n  font-family: ${({ fontFamily }) => fontFamily || \"inherit\"};\n  font-size: ${({ fontSize }) => fontSize || \"inherit\"};\n  font-weight: ${({ fontWeight }) => fontWeight || \"inherit\"};\n  line-height: ${({ lineHeight }) => lineHeight || \"inherit\"};\n  color: ${({ color, theme }) =>\n    color && theme.color[color] ? `hsl(${theme.color[color]})` : \"inherit\"};\n`;\n\nexport default Text;\n","import React, { TextareaHTMLAttributes } from \"react\";\nimport styled, {\n  DefaultTheme,\n  FlattenInterpolation,\n  ThemeProps,\n} from \"styled-components\";\nimport { IUseTextArea } from \"../../hooks/useTextArea\";\n\n// https://codepen.io/chriscoyier/pen/XWKEVLy\n// unfortunately this approach woudn't work\n// if the word is really long\n\ninterface StyleManipulation {\n  copy?: FlattenInterpolation<ThemeProps<DefaultTheme>>;\n}\n\nconst StyledTextArea = styled.div<StyleManipulation>`\n  display: grid;\n\n  &::after {\n    content: attr(data-replicated-value) \" \";\n    white-space: pre-wrap;\n    visibility: hidden;\n  }\n\n  & > textarea {\n    resize: none;\n    overflow: hidden;\n  }\n\n  & > textarea,\n  &::after {\n    grid-area: 1 / 1 / 2 / 2;\n    border: 0;\n    font: inherit;\n    font-size: ${({ theme }) => theme.font.size[400]};\n    color: hsl(${({ theme }) => theme.color.DARK});\n    letter-spacing: inherit;\n    padding: 0;\n    outline: 0;\n    ${({ copy }) => copy && copy}\n  }\n`;\n\nconst TextArea = (\n  props: IUseTextArea &\n    TextareaHTMLAttributes<HTMLTextAreaElement> & {\n      specialStyle?: FlattenInterpolation<ThemeProps<DefaultTheme>>;\n    }\n) => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { divRef, textAreaRef, specialStyle, setValue, ...other } = props;\n  return (\n    <StyledTextArea ref={divRef} copy={specialStyle}>\n      <textarea ref={textAreaRef} {...other} />\n    </StyledTextArea>\n  );\n};\n\nexport default TextArea;\n","import React, { HtmlHTMLAttributes } from \"react\";\nexport const Apps = (\n  props: HtmlHTMLAttributes<HTMLSpanElement>\n): JSX.Element => (\n  <span className=\"material-icons\" {...props}>\n    &#xe5c3;\n  </span>\n);\nexport const Lock = (\n  props: HtmlHTMLAttributes<HTMLSpanElement>\n): JSX.Element => (\n  <span className=\"material-icons\" {...props}>\n    &#xe897;\n  </span>\n);\nexport const MoreHoriz = (\n  props: HtmlHTMLAttributes<HTMLSpanElement>\n): JSX.Element => (\n  <span className=\"material-icons\" {...props}>\n    &#xe5d3;\n  </span>\n);\nexport const Public = (\n  props: HtmlHTMLAttributes<HTMLSpanElement>\n): JSX.Element => (\n  <span className=\"material-icons\" {...props}>\n    &#xe80b;\n  </span>\n);\nexport const ArrowDropDown = (\n  props: HtmlHTMLAttributes<HTMLSpanElement>\n): JSX.Element => (\n  <span className=\"material-icons\" {...props}>\n    &#xe5c5;\n  </span>\n);\nexport const Add = (\n  props: HtmlHTMLAttributes<HTMLSpanElement>\n): JSX.Element => (\n  <span className=\"material-icons\" {...props}>\n    &#xe145;\n  </span>\n);\nexport const Close = (\n  props: HtmlHTMLAttributes<HTMLSpanElement>\n): JSX.Element => (\n  <span className=\"material-icons\" {...props}>\n    &#xe5cd;\n  </span>\n);\nexport const AttachFile = (\n  props: HtmlHTMLAttributes<HTMLSpanElement>\n): JSX.Element => (\n  <span className=\"material-icons\" {...props}>\n    &#xe226;\n  </span>\n);\nexport const Comment = (\n  props: HtmlHTMLAttributes<HTMLSpanElement>\n): JSX.Element => (\n  <span className=\"material-icons\" {...props}>\n    &#xe0b9;\n  </span>\n);\nexport const AccountCircle = (\n  props: HtmlHTMLAttributes<HTMLSpanElement>\n): JSX.Element => (\n  <span className=\"material-icons\" {...props}>\n    &#xe853;\n  </span>\n);\nexport const Description = (\n  props: HtmlHTMLAttributes<HTMLSpanElement>\n): JSX.Element => (\n  <span className=\"material-icons\" {...props}>\n    &#xe873;\n  </span>\n);\nexport const Edit = (\n  props: HtmlHTMLAttributes<HTMLSpanElement>\n): JSX.Element => (\n  <span className=\"material-icons\" {...props}>\n    &#xe3c9;\n  </span>\n);\nexport const Search = (\n  props: HtmlHTMLAttributes<HTMLSpanElement>\n): JSX.Element => (\n  <span className=\"material-icons\" {...props}>\n    &#xe8b6;\n  </span>\n);\nexport const People = (\n  props: HtmlHTMLAttributes<HTMLSpanElement>\n): JSX.Element => (\n  <span className=\"material-icons\" {...props}>\n    &#xe7fb;\n  </span>\n);\nexport const Label = (\n  props: HtmlHTMLAttributes<HTMLSpanElement>\n): JSX.Element => (\n  <span className=\"material-icons\" {...props}>\n    &#xe892;\n  </span>\n);\nexport const Image = (\n  props: HtmlHTMLAttributes<HTMLSpanElement>\n): JSX.Element => (\n  <span className=\"material-icons\" {...props}>\n    &#xe3f4;\n  </span>\n);\nexport const Delete = (\n  props: HtmlHTMLAttributes<HTMLSpanElement>\n): JSX.Element => (\n  <span className=\"material-icons\" {...props}>\n    &#xe872;\n  </span>\n);\nexport const Logout = (\n  props: HtmlHTMLAttributes<HTMLSpanElement>\n): JSX.Element => (\n  <span className=\"material-icons\" {...props}>\n    &#xe9ba;\n  </span>\n);\n","import React from \"react\";\nimport * as Gql from \"../../gqlTypes\";\nimport { Avatar, Flex } from \"../common\";\n\nconst Avatars = ({\n  members,\n  children,\n}: {\n  members: Gql.User[];\n  children?: React.ReactChild;\n}) => (\n  <Flex space=\"0.5rem\" style={{ alignItems: \"center\" }}>\n    {members.map(({ username, avatar }) => (\n      <Avatar key={username} username={username} id={avatar} />\n    ))}\n    {children}\n  </Flex>\n);\n\nexport default Avatars;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  display: flex;\n  padding: 1.5em 2em;\n  justify-content: space-between;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Text } from \".\";\n\ninterface IStyledInfoLabel {\n  color?: string;\n  fontSize?: string;\n  lineHeight?: string;\n  fontFamily?: string;\n}\n\nexport const StyledInfoLabel = styled.div<IStyledInfoLabel>`\n  display: flex;\n  gap: 0.25em;\n  align-items: center;\n  color: hsl(\n    ${({ theme, color }) =>\n      color && theme.color[color] ? theme.color[color] : theme.color.GRAY4}\n  );\n\n  & > * {\n    line-height: ${({ lineHeight }) => lineHeight || \"inherit\"};\n    font-size: ${({ theme, fontSize }) => fontSize || theme.font.size[200]};\n  }\n`;\n\nconst InfoLabel = ({\n  text,\n  children,\n}: {\n  text: string | number;\n  children: React.ReactChild;\n}) => {\n  return (\n    <StyledInfoLabel>\n      {children}\n      <Text>{text}</Text>\n    </StyledInfoLabel>\n  );\n};\n\nexport default InfoLabel;\n","import { useEffect, useRef, useState } from \"react\";\n\nexport interface IUseTextArea {\n  value: string;\n  setValue: React.Dispatch<React.SetStateAction<string>>;\n  onChange: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  divRef: React.RefObject<HTMLDivElement>;\n  textAreaRef: React.RefObject<HTMLTextAreaElement>;\n}\n\nconst useTextArea = (init = \"\"): IUseTextArea => {\n  const [value, setValue] = useState<string>(init);\n  const divRef = useRef<HTMLDivElement>(null);\n  const textAreaRef = useRef<HTMLTextAreaElement>(null);\n\n  useEffect(() => {\n    if (divRef.current && textAreaRef.current) {\n      divRef.current.dataset.replicatedValue = init;\n      textAreaRef.current.value = init;\n    }\n  }, []);\n\n  const onChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    if (!(divRef.current && textAreaRef.current)) return;\n    divRef.current.dataset.replicatedValue = textAreaRef.current.value;\n    setValue(e.target.value);\n  };\n\n  return { value, setValue, onChange, divRef, textAreaRef };\n};\n\nexport default useTextArea;\n","import React from \"react\";\nimport { Avatar, Flex, Text } from \"../common\";\nimport * as Gql from \"../../gqlTypes\";\nimport { useTheme } from \"styled-components\";\n\nconst User = ({\n  user,\n  selected,\n  onClick,\n}: {\n  user: Gql.User;\n  selected?: boolean;\n  onClick?: () => void;\n}) => {\n  const theme = useTheme();\n\n  const base = {\n    alignItems: \"center\",\n    padding: \"0.5em\",\n    width: \"100%\",\n    borderRadius: theme.border.radius[1],\n  };\n  const style = selected\n    ? {\n        ...base,\n        backgroundColor: `hsl(${theme.color.BLUE1})`,\n        color: `hsl(${theme.color.WHITE})`,\n      }\n    : base;\n  return (\n    <Flex space=\"0.75em\" style={style} onClick={onClick}>\n      <Avatar id={user.avatar} username={user.username} />\n      <Text>{user.username}</Text>\n    </Flex>\n  );\n};\n\nexport default User;\n","import { gql } from \"@apollo/client\";\nimport * as Gql from \"../gqlTypes\";\nimport { Color } from \"../gqlTypes\";\n\nexport interface Var {\n  data: {\n    cardId: string;\n    listId: string;\n  };\n}\n\nexport const CHANGE_LIST = gql`\n  mutation CHANGE_LIST($data: ChangeList) {\n    changeList(data: $data) {\n      id\n      list {\n        id\n      }\n    }\n  }\n`;\n\nexport interface CreateCardInput {\n  data: {\n    id?: string;\n    title?: string;\n    description?: string;\n    boardId?: string;\n    listId?: string;\n    members?: string[];\n    coverId?: string;\n  };\n}\nexport const CREATE_CARD = gql`\n  mutation ($data: CreateCardInput) {\n    createCard(cardData: $data) {\n      title\n    }\n  }\n`;\n\nexport interface CreateListInput {\n  data: {\n    name: string;\n    boardId: string;\n  };\n}\n\nexport const CREATE_LIST = gql`\n  mutation ($data: CreateListInput) {\n    createList(list: $data) {\n      name\n      id\n    }\n  }\n`;\n\nexport interface BoardInput {\n  data: {\n    id?: string;\n    title?: string;\n    visibility?: Gql.Visibility;\n    description?: string;\n    coverId?: string;\n    members?: string[];\n  };\n}\n\nexport const CHANGE_VISIBILITY = gql`\n  mutation ($data: CreateBoardInput) {\n    createBoard(boardData: $data) {\n      title\n      visibility\n    }\n  }\n`;\n\nexport const CHANGE_DESCRIPTION = gql`\n  mutation CHANGE_DESCRIPTION($data: CreateBoardInput) {\n    createBoard(boardData: $data) {\n      description\n    }\n  }\n`;\n\nexport const CHANGE_TITLE = gql`\n  mutation CHANGE_TITLE($data: CreateBoardInput) {\n    createBoard(boardData: $data) {\n      title\n    }\n  }\n`;\n\nexport const CREATE_BOARD = gql`\n  mutation CREATE_BOARD($data: CreateBoardInput) {\n    createBoard(boardData: $data) {\n      title\n    }\n  }\n`;\n\nexport interface DeleteUserInput {\n  data: {\n    userId: string;\n    boardId: string;\n  };\n}\n\nexport const DELETE_USER = gql`\n  mutation DELETE_USER($data: DeleteUserInput) {\n    deleteUser(data: $data) {\n      members {\n        user {\n          username\n        }\n      }\n    }\n  }\n`;\n\nexport interface InviteUserInput {\n  data: {\n    userId: string[];\n    boardId: string;\n  };\n}\n\nexport const INVITE_USER = gql`\n  mutation INVITE_USER($data: InviteUserInput) {\n    inviteUser(data: $data) {\n      members {\n        user {\n          username\n        }\n      }\n    }\n  }\n`;\n\nexport interface ChangeListNameInput {\n  data: { name: string; listId: string };\n}\n\nexport const CHANGE_LIST_NAME = gql`\n  mutation CHANGE_LIST_NAME($data: ChangeListNameInput) {\n    changeListName(data: $data) {\n      name\n    }\n  }\n`;\n\nexport interface DeleteListInput {\n  data: {\n    id: string;\n  };\n}\n\nexport const DELETE_LIST = gql`\n  mutation DELETE_LIST($data: DeleteListInput) {\n    deleteList(data: $data)\n  }\n`;\n\nexport interface CommentInput {\n  data: { commentId?: string; cardId?: string; text: string };\n}\n\nexport const CREATE_COMMENT = gql`\n  mutation CREATE_COMMENT($data: CreateComment) {\n    createComment(commentData: $data) {\n      text\n      user {\n        username\n      }\n    }\n  }\n`;\n\nexport interface AddMemberInput {\n  data: {\n    members: string[];\n    cardId: string;\n  };\n}\n\nexport const ADD_MEMBER = gql`\n  mutation ADD_MEMBER($data: AddMemberInput) {\n    addMember(data: $data) {\n      members {\n        username\n      }\n    }\n  }\n`;\n\nexport interface AddLabelInput {\n  data: {\n    id: string;\n    cardId: string;\n  };\n}\n\nexport const ADD_LABEL = gql`\n  mutation ($data: AddLabelInput) {\n    addLabel(data: $data) {\n      id\n    }\n  }\n`;\n\nexport interface CreateLabelInput {\n  data: {\n    boardId?: string;\n    cardId?: string;\n    text?: string;\n    color?: Color;\n  };\n}\n\nexport const CREATE_LABEL = gql`\n  mutation CREATE_LABEL($data: createLabelInput) {\n    createLabel(labelData: $data) {\n      text\n    }\n  }\n`;\n\nexport interface CreateAttachmentInput {\n  data: {\n    cardId?: string;\n    coverId?: string;\n    file?: File | null;\n  };\n}\n\nexport const CREATE_FILE_ATTACHMENT = gql`\n  mutation CREATE_FILE_ATTACHMENT($data: CreateAttachmentInput) {\n    createFileAttachment(data: $data) {\n      title\n    }\n  }\n`;\n\nexport const REMOVE_ATTACHMENT = gql`\n  mutation REMOVE_ATTACHMENT($id: ID) {\n    removeAttachment(id: $id)\n  }\n`;\n\nexport const REMOVE_CARD = gql`\n  mutation REMOVE_CARD($id: ID) {\n    removeCard(id: $id)\n  }\n`;\n\nexport const LOGIN = gql`\n  mutation LOGIN($data: UserInput) {\n    login(credentials: $data) {\n      value\n    }\n  }\n`;\n\nexport interface EditCommentInput {\n  data: {\n    commentId?: string;\n    text?: string;\n  };\n}\n\nexport const EDIT_COMMENT = gql`\n  mutation EDIT_COMMENT($data: EditComment) {\n    editComment(data: $data) {\n      text\n    }\n  }\n`;\n\nexport const DELETE_COMMENT = gql`\n  mutation DELETE_COMMENT($id: ID) {\n    deleteComment(id: $id)\n  }\n`;\n","import { useState } from \"react\";\n\nconst useVisibility = (value = false) => {\n  const [visibility, setVisibility] = useState<boolean>(value);\n\n  const toggleVisibility = () => setVisibility(!visibility);\n\n  return [visibility, toggleVisibility] as const;\n};\n\nexport default useVisibility;\n","import { useRef } from \"react\";\n\nconst useContent = (content = \"\") => {\n  const valueRef = useRef<string>();\n  valueRef.current = content;\n\n  const onSave = (value: string) => (valueRef.current = value);\n  const onCancel = () => valueRef.current || \"\";\n\n  return { onSave, onCancel };\n};\n\nexport default useContent;\n","import React from \"react\";\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport styled, { css, useTheme } from \"styled-components\";\nimport { Data, Var, MASTER, FRIENDS_NOT_IN_BOARD } from \"../../graphql/query\";\nimport {\n  Button,\n  Flex,\n  Icon,\n  Absolute,\n  Text,\n  Flow,\n  Avatar,\n  TextArea,\n} from \"../common\";\nimport InfoLabel from \"../common/InfoLabel\";\nimport * as Gql from \"../../gqlTypes\";\nimport useTextArea from \"../../hooks/useTextArea\";\nimport User from \"../User\";\nimport {\n  CHANGE_DESCRIPTION,\n  DeleteUserInput,\n  DELETE_USER,\n} from \"../../graphql/mutation\";\nimport useVisibility from \"../../hooks/useVisiblity\";\nimport useContent from \"../../hooks/useContent\";\nimport { formatDate } from \"../../utils/formatting\";\nimport { useParams } from \"react-router-dom\";\n\nconst StyledMenu = styled(Flow)`\n  justify-content: space-between;\n  align-items: center;\n  padding: 2em 1.5em;\n  margin-bottom: 1em;\n  max-height: 85vh;\n  overflow-y: scroll;\n  border-radius: ${({ theme }) => theme.border.radius[2]};\n`;\n\nconst StyledMenuWrapper = styled(Absolute)`\n  width: 33%;\n  top: 0;\n  right: 0;\n  z-index: ${({ theme }) => theme.z.MENU};\n  border: 1px solid #e0e0e0;\n  background-color: hsl(${({ theme }) => theme.color.WHITE});\n  border-radius: ${({ theme }) => theme.border.radius[2]};\n`;\n\nconst StyledSeparator = styled.hr`\n  border: 0;\n  height: ${({ theme }) => theme.font.size[1]};\n  background-color: hsl(${({ theme }) => theme.color.GRAY5});\n`;\n\nconst EditTextArea = css`\n  border: 1px solid #bdbdbd;\n  border-radius: ${({ theme }) => theme.border.radius[1]};\n  padding: 1em;\n`;\n\nconst NormalTextArea = css`\n  font-family: ${({ theme }) => theme.font.family.secondary};\n`;\n\nconst Menu = ({ toggle }: { toggle: () => void }) => {\n  const { id } = useParams();\n  if (!id) return null;\n  const ctx = useQuery<Data, Var>(MASTER, {\n    fetchPolicy: \"cache-only\",\n    variables: { id },\n  });\n\n  const owner = ctx.data?.board.members.find(\n    (member) => member.role === \"OWNER\"\n  );\n  const date = formatDate(ctx.data?.board.createdAt);\n\n  return (\n    <StyledMenuWrapper>\n      <StyledMenu>\n        <Flex style={{ justifyContent: \"space-between\", alignItems: \"center\" }}>\n          <Text fontWeight=\"600\">{ctx.data?.board.title}</Text>\n          <Icon.Close onClick={toggle} />\n        </Flex>\n        <StyledSeparator />\n        <Flow>\n          <MadeBy owner={owner as Gql.Member} date={date} />\n          <Description\n            value={ctx.data?.board.description || \"No description yet\"}\n          />\n          <Team />\n        </Flow>\n      </StyledMenu>\n    </StyledMenuWrapper>\n  );\n};\n\nconst MadeBy = ({ owner, date }: { owner: Gql.Member; date: string }) => {\n  const theme = useTheme();\n\n  return (\n    <>\n      {/* Introduction */}\n      <InfoLabel text=\"Made by\">\n        <Icon.AccountCircle />\n      </InfoLabel>\n      {/* Owner Info */}\n      <Flex style={{ alignItems: \"center\" }}>\n        <Avatar username={owner.user.username} id={owner?.user.avatar} />\n        <Flow space=\"0.125em\">\n          <Text fontFamily={theme.font.family.secondary} fontWeight=\"600\">\n            {owner.user.username}\n          </Text>\n          <Text\n            color=\"GRAY4\"\n            fontSize={theme.font.size[200]}\n            lineHeight={theme.lineHeight[0]}\n          >{`on ${date}`}</Text>\n        </Flow>\n      </Flex>\n    </>\n  );\n};\n\nconst Description = ({ value }: { value: string }) => {\n  const { id } = useParams();\n  if (!id) return null;\n  const theme = useTheme();\n  const contentController = useContent(value);\n  const textAreaController = useTextArea(value);\n  const [edit, setEdit] = useVisibility();\n\n  const [changeDescription] = useMutation<{\n    createBoard: Gql.Board;\n  }>(CHANGE_DESCRIPTION, {\n    refetchQueries: [{ query: MASTER, variables: { id } }],\n  });\n\n  const onCancel = () => {\n    textAreaController.setValue(contentController.onCancel());\n    setEdit();\n  };\n\n  const onSave = () => {\n    changeDescription({\n      variables: {\n        boardData: {\n          description: textAreaController.value,\n          id,\n        },\n      },\n    });\n\n    setEdit();\n  };\n\n  return (\n    <Flow>\n      <Flex>\n        <InfoLabel text=\"Description\">\n          <Icon.Description />\n        </InfoLabel>\n        {!edit && (\n          <Button.Outline\n            color=\"GRAY3\"\n            style={{ padding: \"0.25em 1em\" }}\n            onClick={setEdit}\n          >\n            <Icon.Edit style={{ fontSize: theme.font.size[200] }} />\n            <Text fontSize={theme.font.size[200]}>Edit</Text>\n          </Button.Outline>\n        )}\n      </Flex>\n      <Flow>\n        <TextArea\n          {...textAreaController}\n          disabled={!edit}\n          specialStyle={edit ? EditTextArea : NormalTextArea}\n        />\n        {edit && (\n          <Flex style={{ alignItems: \"center\" }}>\n            <Button.Colored\n              backgroundColor=\"GREEN1\"\n              style={{ padding: \"0.4em 1em\" }}\n              onClick={onSave}\n            >\n              <Text\n                fontFamily={theme.font.family.secondary}\n                fontSize={theme.font.size[200]}\n              >\n                Save\n              </Text>\n            </Button.Colored>\n            <Text style={{ cursor: \"pointer\" }} onClick={onCancel}>\n              Cancel\n            </Text>\n          </Flex>\n        )}\n      </Flow>\n    </Flow>\n  );\n};\n\nconst Team = () => {\n  const { id: boardId } = useParams();\n  if (!boardId) return null;\n  const theme = useTheme();\n  const ctx = useQuery<Data, Var>(MASTER, {\n    fetchPolicy: \"cache-only\",\n    variables: { id: boardId },\n  });\n  const [deleteUser] = useMutation<{ deleteUser: Gql.Board }, DeleteUserInput>(\n    DELETE_USER,\n    {\n      refetchQueries: [\n        {\n          query: MASTER,\n          variables: { id: boardId },\n        },\n        {\n          query: FRIENDS_NOT_IN_BOARD,\n          variables: { id: boardId },\n        },\n      ],\n    }\n  );\n\n  const user = ctx.data?.board.members.find(\n    (member) => member.user.id === ctx.data?.authorizedUser.id\n  );\n  const isAdmin = user ? user.role !== \"MEMBER\" : false;\n  const deleteUserHandler = (id: string) =>\n    deleteUser({\n      variables: { data: { boardId, userId: id } },\n    });\n\n  return (\n    <Flow>\n      <InfoLabel text=\"Team\">\n        <Icon.Description />\n      </InfoLabel>\n      {ctx.data?.board.members.map((member) => (\n        <Flex\n          key={member.user.id}\n          style={{ justifyContent: \"space-between\", alignItems: \"center\" }}\n        >\n          <User user={member.user} />\n          {member.role === \"MEMBER\" && isAdmin ? (\n            <Button.Outline\n              color=\"RED\"\n              style={{ padding: \"0.33em 0.75em\" }}\n              onClick={() => deleteUserHandler(member.user.id)}\n            >\n              <Text fontSize={theme.font.size[200]}>Remove</Text>\n            </Button.Outline>\n          ) : (\n            <Text fontSize={theme.font.size[200]} color=\"GRAY4\">\n              {member.role}\n            </Text>\n          )}\n        </Flex>\n      ))}\n    </Flow>\n  );\n};\n\nexport default Menu;\n","import React, { ReactChild, useImperativeHandle, useState } from \"react\";\nimport { HtmlHTMLAttributes } from \"react\";\nimport { Absolute, Relative } from \"../common\";\n\nconst Toggle = React.forwardRef(\n  (\n    {\n      children,\n      props,\n    }: { children: ReactChild[]; props?: HtmlHTMLAttributes<HTMLDivElement> },\n    ref\n  ) => {\n    const [visible, setVisible] = useState<boolean>(false);\n    const [Button, ...Child] = children;\n    const toggleVisibility = () => setVisible((state) => !state);\n    useImperativeHandle(ref, () => ({ toggleVisibility }));\n\n    return (\n      <Relative>\n        <div onClick={toggleVisibility}>{Button}</div>\n        {visible && <Absolute {...props}>{Child}</Absolute>}\n      </Relative>\n    );\n  }\n);\n\nToggle.displayName = \"Toggle\";\nexport default Toggle;\n","interface BaseInterface {\n  id: string;\n}\n\ninterface TimestampInterface {\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport enum Visibility {\n  PRIVATE = \"PRIVATE\",\n  PUBLIC = \"PUBLIC\",\n}\n\nexport enum Role {\n  OWNER = \"OWNER\",\n  ADMIN = \"ADMIN\",\n  MEMBER = \"MEMBER\",\n}\n\nexport enum Color {\n  GREEN1 = \"GREEN1\",\n  YELLOW = \"YELLOW\",\n  ORANGE = \"ORANGE\",\n  RED = \"RED\",\n  BLUE1 = \"BLUE1\",\n  BLUE3 = \"BLUE3\",\n  GREEN3 = \"GREEN3\",\n  GRAY1 = \"GRAY1\",\n  GRAY2 = \"GRAY2\",\n  GRAY3 = \"GRAY3\",\n  GRAY4 = \"GRAY4\",\n  GRAY5 = \"GRAY5\",\n}\n\nexport interface User extends BaseInterface, TimestampInterface {\n  username: string;\n  avatar?: string;\n  boards: Board[];\n  friends: User[];\n}\n\nexport interface Board extends BaseInterface, TimestampInterface {\n  title?: string;\n  visibility: Visibility;\n  description?: string;\n  lists: List[];\n  cards: Card[];\n  coverId?: string;\n  members: Member[];\n  labels: Label[];\n}\n\nexport interface Member {\n  user: User;\n  role: Role;\n}\n\nexport interface Attachment extends BaseInterface, TimestampInterface {\n  url: string;\n  title: string;\n  coverId: string;\n  filename: string;\n}\n\nexport interface Label extends BaseInterface {\n  text: string;\n  color: Color;\n}\n\nexport interface Card extends BaseInterface, TimestampInterface {\n  title: string;\n  description: string;\n  list: List;\n  comments: Comment[];\n  labels: Label[];\n  attachments: Attachment[];\n  coverId?: string;\n  members: User[];\n  author: User;\n}\n\nexport interface Comment extends BaseInterface, TimestampInterface {\n  text: string;\n  user: User;\n  replies: Comment;\n}\n\nexport interface List extends BaseInterface {\n  name: string;\n  cards: Card[];\n}\n","import styled from \"styled-components\";\nimport { Flow } from \"../common\";\n\nexport default styled(Flow)`\n  border: 1px solid #e0e0e0;\n  padding: 0.5em;\n  border-radius: ${({ theme }) => theme.border.radius[1]};\n  filter: drop-shadow(0px 4px 12px rgba(0, 0, 0, 0.1));\n\n  .flex {\n    justify-content: space-between;\n    align-items: center;\n  }\n`;\n","import React, { useEffect, useState } from \"react\";\nimport { useTheme } from \"styled-components\";\nimport { InputGroup, Flow, Text, Button, Icon, Flex } from \"../common\";\nimport User from \"../User\";\nimport StyledFriendFlow from \"./StyledFriendFlow\";\nimport * as Gql from \"../../gqlTypes\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { Var, FRIENDS_NOT_IN_BOARD } from \"../../graphql/query\";\nimport { useParams } from \"react-router-dom\";\n\nconst InviteFriend = ({ action }: { action: (ids: string[]) => void }) => {\n  const { id } = useParams();\n  if (!id) return null;\n  const theme = useTheme();\n\n  const [selected, setSelected] = useState<string[]>([]);\n  const [getFriends, { data, loading, error }] = useLazyQuery<\n    { friendsNotInBoard: Gql.User[] },\n    Var\n  >(FRIENDS_NOT_IN_BOARD, { variables: { id } });\n\n  useEffect(() => {\n    if (!data) {\n      getFriends();\n    }\n  }, []);\n\n  const handleSelectUser = (id: string) =>\n    setSelected(\n      selected.indexOf(id) > -1\n        ? selected.filter((obj) => obj !== id)\n        : [...selected, id]\n    );\n\n  const clickHandler = () => {\n    action(selected);\n  };\n\n  if (!data || !data.friendsNotInBoard || loading || error) return null;\n  return (\n    <Flow space=\"1em\" style={{ minWidth: \"20em\" }}>\n      <Flow space=\"1px\">\n        <Text color=\"GRAY2\">Invite to Board</Text>\n        <Text color=\"GRAY3\" fontFamily={theme.font.family.secondary}>\n          Search users you want to invite to\n        </Text>\n      </Flow>\n      <InputGroup props={{ placeholder: \"User...\" }} width=\"100%\">\n        <Button.Squared>\n          <Icon.Search />\n        </Button.Squared>\n      </InputGroup>\n      <StyledFriendFlow>\n        {data.friendsNotInBoard.length === 0 && (\n          <Text>All your friends are here!</Text>\n        )}\n        {data.friendsNotInBoard.map((friend) => (\n          <Flex key={friend.id}>\n            <User\n              user={friend}\n              selected={selected.indexOf(friend.id) > -1}\n              onClick={() => handleSelectUser(friend.id)}\n            />\n          </Flex>\n        ))}\n      </StyledFriendFlow>\n      <Flow style={{ textAlign: \"center\", marginTop: \"2em\" }}>\n        <Button.Colored\n          style={{ padding: \"0.75em 1em\" }}\n          onClick={clickHandler}\n        >\n          Invite\n        </Button.Colored>\n      </Flow>\n    </Flow>\n  );\n};\n\nexport default InviteFriend;\n","import React from \"react\";\nimport { useTheme } from \"styled-components\";\nimport { Button, Icon } from \"../common\";\nimport * as Gql from \"../../gqlTypes\";\nimport Toggle from \"../Toggle\";\nimport InviteFriend from \"../InviteFriend\";\nimport { useMutation } from \"@apollo/client\";\nimport { InviteUserInput, INVITE_USER } from \"../../graphql/mutation\";\nimport { MASTER, FRIENDS_NOT_IN_BOARD } from \"../../graphql/query\";\nimport { useParams } from \"react-router-dom\";\n\nconst InviteFriendModal = () => {\n  const { id } = useParams();\n  if (!id) return null;\n  const theme = useTheme();\n  const ToggleStyle = {\n    style: {\n      marginTop: \"1em\",\n      zIndex: theme.z.HEADER_POPUP,\n      backgroundColor: `hsl(${theme.color.WHITE})`,\n      minWidth: \"23em\",\n      padding: \"0.75em 1em\",\n      border: \"1px solid #E0E0E0\",\n      boxShadow: \"0px 2px 4px rgba(0, 0, 0, 0.05)\",\n      borderRadius: theme.border.radius[2],\n    },\n  };\n\n  const [inviteUser] = useMutation<{ inviteUser: Gql.Board }, InviteUserInput>(\n    INVITE_USER,\n    {\n      refetchQueries: [\n        { query: MASTER, variables: { id } },\n        {\n          query: FRIENDS_NOT_IN_BOARD,\n          variables: { id },\n        },\n      ],\n    }\n  );\n\n  const inviteUserHandler = (selected: string[]) => {\n    inviteUser({\n      variables: {\n        data: {\n          userId: selected,\n          boardId: id,\n        },\n      },\n    });\n  };\n\n  return (\n    <Toggle props={ToggleStyle}>\n      {/* Button */}\n      <Button.Squared>\n        <Icon.Add />\n      </Button.Squared>\n      <InviteFriend action={inviteUserHandler} />\n    </Toggle>\n  );\n};\n\nexport default InviteFriendModal;\n","import styled from \"styled-components\";\nimport { Flow } from \"../common\";\n\nexport default styled(Flow)`\n  padding: 1em;\n  font-family: ${({ theme }) => theme.font.family.secondary};\n  border-radius: ${({ theme }) => theme.border.radius[1]};\n\n  &:hover {\n    background-color: hsl(${({ theme }) => theme.color.DARK} / 0.05);\n    cursor: pointer;\n  }\n`;\n","import React from \"react\";\nimport { useTheme } from \"styled-components\";\nimport { Text } from \"../common\";\nimport { StyledInfoLabel } from \"../common/InfoLabel\";\nimport StyledCard from \"./StyledCard\";\n\nconst Card = ({\n  children,\n  description,\n  onClick,\n}: {\n  children: React.ReactNode;\n  description: string;\n  onClick: () => void;\n}) => {\n  const theme = useTheme();\n  return (\n    <StyledCard space=\"0.25em\" onClick={onClick}>\n      <StyledInfoLabel color=\"GRAY2\" fontSize={theme.font.size[300]}>\n        {children}\n      </StyledInfoLabel>\n      <Text color=\"GRAY3\" fontSize={theme.font.size[200]}>\n        {description}\n      </Text>\n    </StyledCard>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport { useTheme } from \"styled-components\";\nimport Card from \"./Card\";\nimport { Flow, Icon, Text } from \"../common\";\nimport { useMutation } from \"@apollo/client\";\nimport { BoardInput, CHANGE_VISIBILITY } from \"../../graphql/mutation\";\nimport { MASTER } from \"../../graphql/query\";\nimport * as Gql from \"../../gqlTypes\";\nimport { useParams } from \"react-router-dom\";\n\nconst VisibilityCard = ({ setVisible }: { setVisible: () => void }) => {\n  const { id } = useParams();\n  const theme = useTheme();\n\n  const [changeVisibility] = useMutation<{ creteBoard: Gql.Board }, BoardInput>(\n    CHANGE_VISIBILITY,\n    {\n      refetchQueries: [\n        {\n          query: MASTER,\n          variables: { id },\n        },\n      ],\n    }\n  );\n\n  const handleChangeVisibility = (visibility: Gql.Visibility) => {\n    changeVisibility({ variables: { data: { id, visibility } } });\n    setVisible();\n  };\n\n  return (\n    <Flow space=\"0.5em\">\n      <Flow space=\"1px\">\n        <Text color=\"GRAY2\" fontWeight=\"600\">\n          Visibility\n        </Text>\n        <Text\n          color=\"GRAY3\"\n          fontSize={theme.font.size[200]}\n          lineHeight={theme.lineHeight[0]}\n        >\n          Choose who can see to this board.\n        </Text>\n      </Flow>\n\n      <Card\n        description=\"Anyone on the internet can see this.\"\n        onClick={() => handleChangeVisibility(Gql.Visibility.PUBLIC)}\n      >\n        <Icon.Public />\n        <Text fontWeight=\"bold\">Public</Text>\n      </Card>\n      <Card\n        onClick={() => handleChangeVisibility(Gql.Visibility.PRIVATE)}\n        description=\"Only board members can see this\"\n      >\n        <Icon.Lock />\n        <Text fontWeight=\"bold\">Private</Text>\n      </Card>\n    </Flow>\n  );\n};\n\nexport default VisibilityCard;\n","var _path, _path2, _path3;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgLogo(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 98,\n    height: 29,\n    viewBox: \"0 0 98 29\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M54.3311 8.436V10.47H50.9831V21H48.4631V10.47H45.1151V8.436H54.3311ZM61.1557 10.884C61.9117 10.884 62.5837 11.052 63.1717 11.388C63.7597 11.712 64.2157 12.198 64.5397 12.846C64.8757 13.482 65.0437 14.25 65.0437 15.15V21H62.5237V15.492C62.5237 14.7 62.3257 14.094 61.9297 13.674C61.5337 13.242 60.9937 13.026 60.3097 13.026C59.6137 13.026 59.0617 13.242 58.6537 13.674C58.2577 14.094 58.0597 14.7 58.0597 15.492V21H55.5397V7.68H58.0597V12.27C58.3837 11.838 58.8157 11.502 59.3557 11.262C59.8957 11.01 60.4957 10.884 61.1557 10.884ZM76.2241 11.028V21H73.6861V19.74C73.3621 20.172 72.9361 20.514 72.4081 20.766C71.8921 21.006 71.3281 21.126 70.7161 21.126C69.9361 21.126 69.2461 20.964 68.6461 20.64C68.0461 20.304 67.5721 19.818 67.2241 19.182C66.8881 18.534 66.7201 17.766 66.7201 16.878V11.028H69.2401V16.518C69.2401 17.31 69.4381 17.922 69.8341 18.354C70.2301 18.774 70.7701 18.984 71.4541 18.984C72.1501 18.984 72.6961 18.774 73.0921 18.354C73.4881 17.922 73.6861 17.31 73.6861 16.518V11.028H76.2241ZM80.6005 7.68V21H78.0805V7.68H80.6005ZM84.9803 7.68V21H82.4603V7.68H84.9803ZM91.268 21.162C90.308 21.162 89.444 20.952 88.676 20.532C87.908 20.1 87.302 19.494 86.858 18.714C86.426 17.934 86.21 17.034 86.21 16.014C86.21 14.994 86.432 14.094 86.876 13.314C87.332 12.534 87.95 11.934 88.73 11.514C89.51 11.082 90.38 10.866 91.34 10.866C92.3 10.866 93.17 11.082 93.95 11.514C94.73 11.934 95.342 12.534 95.786 13.314C96.242 14.094 96.47 14.994 96.47 16.014C96.47 17.034 96.236 17.934 95.768 18.714C95.312 19.494 94.688 20.1 93.896 20.532C93.116 20.952 92.24 21.162 91.268 21.162ZM91.268 18.966C91.724 18.966 92.15 18.858 92.546 18.642C92.954 18.414 93.278 18.078 93.518 17.634C93.758 17.19 93.878 16.65 93.878 16.014C93.878 15.066 93.626 14.34 93.122 13.836C92.63 13.32 92.024 13.062 91.304 13.062C90.584 13.062 89.978 13.32 89.486 13.836C89.006 14.34 88.766 15.066 88.766 16.014C88.766 16.962 89 17.694 89.468 18.21C89.948 18.714 90.548 18.966 91.268 18.966Z\",\n    fill: \"#333333\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M0 4C0 1.79086 1.79086 0 4 0H10C12.2091 0 14 1.79086 14 4V25C14 27.2091 12.2091 29 10 29H4C1.79086 29 0 27.2091 0 25V4Z\",\n    fill: \"#2F80ED\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M18 4C18 1.79086 19.7909 0 22 0H28C30.2091 0 32 1.79086 32 4V14C32 16.2091 30.2091 18 28 18H22C19.7909 18 18 16.2091 18 14V4Z\",\n    fill: \"#2F80ED\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgLogo);\nexport default __webpack_public_path__ + \"static/media/Logo.7ba81713.svg\";\nexport { ForwardRef as ReactComponent };","import React, { HTMLAttributes } from \"react\";\nimport { Visibility } from \"../../gqlTypes\";\nimport { Button, Icon, Text } from \"../common\";\n\nconst VisibilityBadge = (\n  props: HTMLAttributes<HTMLButtonElement> & { visibility: string }\n) => {\n  const { visibility, ...prop } = props;\n\n  return visibility === Visibility.PRIVATE ? (\n    <Private {...prop} />\n  ) : (\n    <Public {...prop} />\n  );\n};\n\nconst Private = (props: HTMLAttributes<HTMLButtonElement>) => (\n  <Button.Icon {...props}>\n    <Icon.Lock />\n    <Text>Private</Text>\n  </Button.Icon>\n);\n\nconst Public = (props: HTMLAttributes<HTMLButtonElement>) => (\n  <Button.Icon {...props}>\n    <Icon.Public />\n    <Text>Public</Text>\n  </Button.Icon>\n);\n\nexport default VisibilityBadge;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport VisibilityCard from \"../VisibilityCard\";\nimport VisibilityBadge from \"./Badge\";\nimport * as Gql from \"../../gqlTypes\";\nimport { Absolute, Relative } from \"../common\";\nimport useVisibility from \"../../hooks/useVisiblity\";\n\nconst StyledVisibilityModal = styled(Absolute)`\n  margin-top: 1em;\n  background-color: hsl(${({ theme }) => theme.color.WHITE});\n  z-index: ${({ theme }) => theme.z.HEADER_POPUP};\n  min-width: 20em;\n  padding: 1em;\n  border: 1px solid #e0e0e0;\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.05);\n  border-radius: ${({ theme }) => theme.border.radius[2]};\n`;\n\nconst VisibilityModal = ({ visibility }: { visibility: Gql.Visibility }) => {\n  const [visible, setVisible] = useVisibility();\n  return (\n    <Relative>\n      <VisibilityBadge visibility={visibility} onClick={setVisible} />\n      {visible && (\n        <StyledVisibilityModal>\n          <VisibilityCard setVisible={setVisible} />\n        </StyledVisibilityModal>\n      )}\n    </Relative>\n  );\n};\n\nexport default VisibilityModal;\n","import React from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { Data, MASTER, Var } from \"../../graphql/query\";\nimport { Button, Flex, Icon, Relative, Text } from \"../common\";\n\nimport Avatars from \"../Avatars\";\nimport StyledInfobar from \"./StyledInfobar\";\nimport * as Gql from \"../../gqlTypes\";\nimport Menu from \"../Menu\";\nimport useVisibility from \"../../hooks/useVisiblity\";\nimport InviteFriendModal from \"./InviteFriendModal\";\nimport VisibilityModal from \"./VisibilityModal\";\nimport { useParams } from \"react-router-dom\";\n\nconst Infobar = () => {\n  const { id } = useParams();\n  if (!id) return null;\n  const ctx = useQuery<Data, Var>(MASTER, {\n    fetchPolicy: \"cache-and-network\",\n    variables: { id },\n  });\n\n  const [visibility, setVisibility] = useVisibility();\n\n  if (!ctx.data) return null;\n\n  return (\n    <Relative>\n      <StyledInfobar>\n        {/* Left hand side */}\n        <Flex>\n          <VisibilityModal visibility={ctx.data.board.visibility} />\n          <Avatars\n            members={ctx.data.board.members.map(\n              ({ user }: { user: Gql.User }) => user\n            )}\n          >\n            {/* Append this at the end of the 'mapping' */}\n            <InviteFriendModal />\n          </Avatars>\n        </Flex>\n        {/* Right hand side */}\n        <Button.Icon onClick={setVisibility}>\n          <Icon.MoreHoriz />\n          <Text>Show Menu</Text>\n        </Button.Icon>\n      </StyledInfobar>\n      {visibility && <Menu toggle={setVisibility} />}\n    </Relative>\n  );\n};\n\nexport default Infobar;\n","import React from \"react\";\nimport styled, { useTheme } from \"styled-components\";\nimport { Flex, Text } from \"../common/index\";\n\ninterface Ratio {\n  ratio?: string;\n}\n\nexport const Cover = styled.img<Ratio>`\n  aspect-ratio: ${({ ratio }) => ratio || \"5 / 3\"};\n  border-radius: ${({ theme }) => theme.border.radius[1]};\n  object-position: center;\n  object-fit: cover;\n`;\n\nexport const Title = ({ children }: { children: React.ReactChild }) => {\n  const theme = useTheme();\n  return (\n    <Text\n      fontFamily={theme.font.family.secondary}\n      fontWeight=\"400\"\n      fontSize={theme.font.size[\"500\"]}\n      lineHeight={theme.lineHeight[2]}\n      color=\"DARK\"\n    >\n      {children}\n    </Text>\n  );\n};\n\nexport const Labels = styled(Flex)`\n  justify-content: flex-start;\n  flex-wrap: wrap;\n  gap: 0.25em;\n`;\n\nexport const StatusBar = styled(Flex)`\n  align-items: center;\n  justify-content: space-between;\n`;\n","import styled, { css } from \"styled-components\";\nimport { Flow } from \"../common\";\n\nexport interface IDraggingStyle {\n  isDragging: boolean;\n}\n\nconst draggingStyle = css`\n  transform: rotate(2.81deg);\n`;\n\nexport default styled(Flow)<IDraggingStyle>`\n  background-color: hsl(${({ theme }) => theme.color.WHITE});\n  box-shadow: 0px 4px 12px hsl(${({ theme }) => theme.color.DARK} / 0.05);\n  border-radius: ${({ theme }) => theme.border.radius[2]};\n  padding: 1em;\n  ${({ isDragging }) => isDragging && draggingStyle}\n`;\n","import { useMutation } from \"@apollo/client\";\nimport React, { ChangeEvent } from \"react\";\nimport styled, { useTheme } from \"styled-components\";\nimport { CreateCardInput, CREATE_CARD } from \"../../graphql/mutation\";\nimport { MASTER } from \"../../graphql/query\";\nimport { Button, Icon, Text, Flex, Flow } from \"../common\";\nimport * as Gql from \"../../gqlTypes\";\nimport { useParams } from \"react-router-dom\";\n\ninterface Image {\n  id?: string;\n  url?: string;\n}\n\nexport const Cover = styled.div<Image>`\n  width: 100%;\n  height: 130px;\n  background-size: cover;\n  background-position: center;\n  background-image: url(${({ url }) => url});\n  border-radius: ${({ theme }) => theme.border.radius[2]};\n`;\n\nexport const StyledHeader = styled(Flex)<{ hasCover?: boolean }>`\n  flex-direction: column;\n  gap: 2em;\n\n  & .offset-button {\n    align-self: flex-end;\n    z-index: 6;\n    ${({ hasCover }) => hasCover && \"margin: -1em -0.5em -3.5em 0;\"}\n  }\n`;\n\nconst Header = ({\n  card,\n  setVisibility,\n}: {\n  card: Gql.Card;\n  setVisibility: () => void;\n}) => {\n  const { id } = useParams();\n  if (!id) return null;\n  const theme = useTheme();\n  const [changeTitle] = useMutation<{ createCard: Gql.Card }, CreateCardInput>(\n    CREATE_CARD,\n    {\n      refetchQueries: [\n        {\n          query: MASTER,\n          fetchPolicy: \"network-only\",\n          variables: { id },\n        },\n      ],\n    }\n  );\n  const handleTitleChange = (e: ChangeEvent<HTMLParagraphElement>) =>\n    changeTitle({\n      variables: {\n        data: {\n          listId: card.list.id,\n          boardId: id,\n          id: card.id,\n          title: e.target.outerText,\n        },\n      },\n    });\n  return (\n    <StyledHeader space=\"0.5em\" hasCover={Boolean(card.coverId)}>\n      {/* Offsettable button */}\n      <Button.Squared className=\"offset-button\" onClick={setVisibility}>\n        <Icon.Close />\n      </Button.Squared>\n\n      {/* Cover Image */}\n      {card.coverId && <Cover url={card.coverId} />}\n\n      {/* Headings */}\n      <Flow space=\"0.5em\">\n        <Text\n          fontSize={theme.font.size[500]}\n          fontFamily={theme.font.family.secondary}\n          color=\"DARK\"\n          lineHeight={theme.lineHeight[2]}\n          as=\"h1\"\n          contentEditable\n          suppressContentEditableWarning\n          onBlur={handleTitleChange}\n        >\n          {card.title}\n        </Text>\n        <Text\n          fontSize={theme.font.size[200]}\n          lineHeight={theme.lineHeight[0]}\n          fontWeight=\"600\"\n          color=\"GRAY4\"\n          as=\"h2\"\n        >\n          in list\n          <Text as=\"span\" color=\"DARK\">\n            {\" \" + card.list.name}\n          </Text>\n        </Text>\n      </Flow>\n    </StyledHeader>\n  );\n};\n\nexport default Header;\n","import { DefaultTheme } from \"styled-components\";\n\nexport default {\n  color: {\n    DARK: \"0 0% 0%\",\n    WHITE: \"0 0% 100%\",\n    WHITE1: \"228, 56%, 98%\",\n    GREEN1: \"146 64% 36%\",\n    YELLOW: \"45 86% 62%\",\n    ORANGE: \"28 87% 62%\",\n    RED: \"0 79% 63%\",\n    BLUE1: \"214 84% 56%\",\n    BLUE3: \"195 86% 64%\",\n    GREEN3: \"145 50% 62%\",\n    GRAY1: \"0 0% 20%\",\n    GRAY2: \"0 0% 31%\",\n    GRAY3: \"0 0% 51%\",\n    GRAY4: \"0 0% 74%\",\n    GRAY5: \"0 0% 88%\",\n  },\n  font: {\n    family: {\n      normal: \"Poppins\",\n      secondary: \"Noto Sans\",\n    },\n    size: {\n      1: \"0.0625rem\", // 1px\n      100: \"0.5rem\", // 8px\n      200: \"0.625rem\", // 10px\n      300: \"0.75rem\", // 12px\n      400: \"0.875rem\", // 14px\n      500: \"1rem\", // 16px\n      600: \"1.125rem\", // 18px\n    },\n  },\n  lineHeight: {\n    0: \"16px\",\n    1: \"18px\",\n    2: \"22px\",\n    3: \"27px\",\n  },\n  border: {\n    radius: {\n      1: \"0.5rem\",\n      2: \"0.75rem\",\n      3: \"1.5rem\",\n    },\n  },\n  z: {\n    BASE: 0,\n    BOARD_POPUP: 1,\n    HEADER_POPUP: 2,\n    MENU: 3,\n    CARD: 4,\n    CARD_POPUP: 5,\n  },\n} as DefaultTheme;\n","import { useMutation } from \"@apollo/client\";\nimport React from \"react\";\nimport { css } from \"styled-components\";\nimport { CreateCardInput, CREATE_CARD } from \"../../graphql/mutation\";\nimport { MASTER } from \"../../graphql/query\";\nimport useTextArea from \"../../hooks/useTextArea\";\nimport useVisibility from \"../../hooks/useVisiblity\";\nimport theme from \"../../style/theme\";\nimport { Flow, Flex, Icon, Button, TextArea, Text } from \"../common\";\nimport InfoLabel from \"../common/InfoLabel\";\nimport * as Gql from \"../../gqlTypes\";\nimport { useParams } from \"react-router-dom\";\n\nconst DescriptionSection = ({ card }: { card: Gql.Card }) => {\n  const { id } = useParams();\n  if (!id) return null;\n  const [edit, setEdit] = useVisibility(true);\n  const descriptionController = useTextArea(\n    card.description || \"There's no description yet\"\n  );\n  const [changeDescription] = useMutation<\n    { createCard: Gql.Card },\n    CreateCardInput\n  >(CREATE_CARD, {\n    refetchQueries: [\n      {\n        query: MASTER,\n        variables: { id },\n      },\n    ],\n  });\n  const handleDescriptionChange = () => {\n    changeDescription({\n      variables: {\n        data: {\n          listId: card.list.id,\n          boardId: id,\n          id: card.id,\n          description: descriptionController.value,\n        },\n      },\n    });\n    setEdit();\n  };\n  const descriptionStyle = css`\n    color: hsl(${({ theme }) => theme.color.DARK});\n    font-size: ${({ theme }) => theme.font.size[400]};\n  `;\n\n  return (\n    <Flow>\n      {/* Logo + Edit button */}\n      <Flex>\n        <InfoLabel text=\"Description\">\n          <Icon.Description />\n        </InfoLabel>\n        {edit && (\n          <Button.Outline\n            color=\"GRAY3\"\n            style={{ padding: \"0.25em 1em\" }}\n            onClick={setEdit}\n          >\n            <Icon.Edit style={{ fontSize: theme.font.size[200] }} />\n            <Text fontSize={theme.font.size[200]}>Edit</Text>\n          </Button.Outline>\n        )}\n      </Flex>\n\n      {/* Content */}\n      <TextArea\n        onBlur={handleDescriptionChange}\n        disabled={edit}\n        {...descriptionController}\n        specialStyle={descriptionStyle}\n      />\n    </Flow>\n  );\n};\n\nexport default DescriptionSection;\n","import { useMutation } from \"@apollo/client\";\nimport React, { ChangeEvent } from \"react\";\nimport styled from \"styled-components\";\nimport * as Gql from \"../../gqlTypes\";\nimport {\n  DELETE_COMMENT,\n  EditCommentInput,\n  EDIT_COMMENT,\n} from \"../../graphql/mutation\";\nimport { CARD } from \"../../graphql/query\";\nimport useVisibility from \"../../hooks/useVisiblity\";\nimport { formatDate } from \"../../utils/formatting\";\nimport { Avatar, Flex, Flow, Text } from \"../common\";\n\nconst StyledComment = styled.div`\n  padding: 0.5em 0;\n  display: grid;\n  grid-template-columns: max-content auto max-content;\n  align-items: center;\n  gap: 1em;\n`;\n\nconst Comment = ({\n  comment,\n  isAuthor,\n  cardId,\n}: {\n  comment: Gql.Comment;\n  isAuthor: boolean;\n  cardId: string;\n}) => {\n  const commentDate = formatDate(comment.createdAt);\n  const [edit, setEdit] = useVisibility();\n\n  const [editComment] = useMutation<\n    { editComment: Gql.Comment },\n    EditCommentInput\n  >(EDIT_COMMENT, {\n    refetchQueries: [{ query: CARD, variables: { id: cardId } }],\n  });\n  const [deleteComment] = useMutation<Record<string, unknown>, { id: string }>(\n    DELETE_COMMENT,\n    { refetchQueries: [{ query: CARD, variables: { id: cardId } }] }\n  );\n\n  const editCommentHandler = (e: ChangeEvent<HTMLParagraphElement>) => {\n    editComment({\n      variables: {\n        data: {\n          commentId: comment.id,\n          text: e.target.outerText,\n        },\n      },\n    });\n    setEdit();\n  };\n\n  return (\n    <div>\n      <StyledComment>\n        {/* Header */}\n        <Avatar id={comment.user.avatar} username={comment.user.username} />\n        <Flow space=\"0.25em\">\n          <Text>{comment.user.username}</Text>\n          <Text>{commentDate}</Text>\n        </Flow>\n        {/* Actions */}\n\n        {isAuthor && !edit && (\n          <Flex style={{ alignItems: \"center\" }} space=\"0.25em\">\n            <Text style={{ cursor: \"pointer\" }}>Edit</Text>\n            <Text>-</Text>\n            <Text\n              style={{ cursor: \"pointer\" }}\n              onClick={() => deleteComment({ variables: { id: comment.id } })}\n            >\n              Delete\n            </Text>\n          </Flex>\n        )}\n      </StyledComment>\n      {/* Content */}\n      <Text\n        className=\"comment-text\"\n        contentEditable\n        suppressContentEditableWarning\n        onBlur={editCommentHandler}\n        onFocus={setEdit}\n      >\n        {comment.text}\n      </Text>\n    </div>\n  );\n};\n\nexport default Comment;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport useTextArea from \"../../hooks/useTextArea\";\nimport { Flow, Avatar, TextArea, Button } from \"../common\";\nimport Comment from \"./Comment\";\nimport * as Gql from \"../../gqlTypes\";\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { CARD, Data, MASTER } from \"../../graphql/query\";\nimport { CREATE_COMMENT, CommentInput } from \"../../graphql/mutation\";\nimport { useParams } from \"react-router-dom\";\n\nconst StyledCommentForm = styled.div`\n  display: grid;\n  grid-template:\n    [row1-start] \"a b\" max-content [row1-end]\n    [row2-start] \". c\" [row2-end] / max-content auto;\n  box-shadow: 0px 2px 8px rgba(0, 0, 0, 0.1);\n  border: 1px solid hsl(${({ theme }) => theme.color.GRAY5});\n  padding: 1em;\n  border-radius: 12px;\n  column-gap: 1em;\n\n  & > .button-colored {\n    padding: 0.5em 1em;\n    grid-area: c;\n    justify-self: end;\n  }\n`;\n\nconst StyledCommentFlow = styled(Flow)`\n  & > *:where(:not(:first-child)) {\n    border-top: 1px solid #f2f2f2;\n  }\n`;\n\nconst CommentSection = ({\n  comments,\n  cardId,\n  cardAuthor,\n}: {\n  comments: Gql.Comment[];\n  cardId: string;\n  cardAuthor: string;\n}) => {\n  const { id } = useParams();\n  if (!id) return null;\n  const commentController = useTextArea();\n  const { data } = useQuery<Data, { id: string }>(MASTER, {\n    variables: { id },\n    fetchPolicy: \"cache-only\",\n  });\n  const [createComment] = useMutation<\n    { createComment: Gql.Comment },\n    CommentInput\n  >(CREATE_COMMENT, {\n    refetchQueries: [{ query: CARD, variables: { id: cardId } }],\n  });\n\n  const createCommentHandler = () => {\n    createComment({\n      variables: { data: { text: commentController.value, cardId } },\n    });\n    commentController.setValue(\"\");\n  };\n\n  if (!data) return null;\n  const isAuthor = data.authorizedUser.id === cardAuthor;\n\n  return (\n    <Flow>\n      <StyledCommentForm>\n        <Avatar\n          id={data.authorizedUser.avatar}\n          username={data.authorizedUser.username}\n        />\n        <TextArea {...commentController} placeholder=\"Write a comment...\" />\n        <Button.Colored\n          className=\"button-colored\"\n          onClick={createCommentHandler}\n        >\n          Comment\n        </Button.Colored>\n      </StyledCommentForm>\n      <StyledCommentFlow>\n        {comments.map((comment) => (\n          <Comment\n            comment={comment}\n            key={comment.id}\n            isAuthor={isAuthor}\n            cardId={cardId}\n          />\n        ))}\n      </StyledCommentFlow>\n    </Flow>\n  );\n};\n\nexport default CommentSection;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { getAbbreviation } from \"../../utils/formatting\";\n\ninterface Source {\n  coverId: string;\n}\n\nconst StyledImageCover = styled.div<Source>`\n  background-size: cover;\n  border-radius: 8px;\n  background-image: url(https://source.unsplash.com/${({ coverId: coverId }) =>\n    coverId});\n`;\n\nconst StyledTextCover = styled.div`\n  display: grid;\n  align-content: center;\n  text-align: center;\n  background-color: hsl(${({ theme }) => theme.color.GRAY5});\n  color: hsl(${({ theme }) => theme.color.GRAY2});\n  border-radius: ${({ theme }) => theme.border.radius[1]};\n`;\n\nconst AttachmentCover = ({\n  coverId,\n  title,\n}: {\n  coverId?: string;\n  title: string;\n}) => {\n  if (coverId) {\n    return <StyledImageCover coverId={coverId} />;\n  }\n  return <StyledTextCover>{getAbbreviation(title)}</StyledTextCover>;\n};\n\nexport default AttachmentCover;\n","import axios from \"axios\";\n// https://gist.github.com/Tomassito/a5b4d29f459b9383dc3daa313ae5f73b\nexport const download = async (path: string) => {\n  const response = await axios({\n    url: \"/download\",\n    method: \"POST\",\n    responseType: \"blob\",\n    data: { path },\n  });\n  const contentType = response.headers[\"content-type\"].split(\";\")[0];\n  const url = window.URL.createObjectURL(\n    new Blob([response.data], { type: contentType })\n  );\n  const link = document.createElement(\"a\");\n  link.href = url;\n  link.setAttribute(\"download\", path);\n  document.body.appendChild(link);\n  link.click();\n  window.URL.revokeObjectURL(url);\n  document.body.removeChild(link);\n};\n","import React from \"react\";\nimport * as Gql from \"../../gqlTypes\";\nimport styled, { useTheme } from \"styled-components\";\nimport { Flow, Flex, Button, Text } from \"../common\";\nimport { formatDate } from \"../../utils/formatting\";\nimport AttachmentCover from \"./AttachmentCover\";\nimport { download } from \"../../utils/downloader\";\nimport { useMutation } from \"@apollo/client\";\nimport { REMOVE_ATTACHMENT } from \"../../graphql/mutation\";\nimport { CARD } from \"../../graphql/query\";\n\nconst StyledAttachment = styled.div`\n  display: grid;\n  grid-template-columns: 80px auto;\n  gap: 1em;\n`;\n\nconst Attachment = ({\n  attachment,\n  cardId,\n}: {\n  attachment: Gql.Attachment;\n  cardId: string;\n}) => {\n  const theme = useTheme();\n  const date = formatDate(attachment.createdAt);\n  const [removeAttachment] = useMutation(REMOVE_ATTACHMENT, {\n    refetchQueries: [{ query: CARD, variables: { id: cardId } }],\n  });\n\n  const removeAttachmentHandler = () => {\n    removeAttachment({ variables: { id: attachment.id } });\n  };\n\n  return (\n    <StyledAttachment>\n      <AttachmentCover\n        coverId={attachment.coverId}\n        title={attachment.title || \"Untitled\"}\n      />\n      <Flow space=\"0.5em\">\n        <div>\n          <Text fontSize={theme.font.size[100]} style={{ lineHeight: \"12px\" }}>\n            added {date}\n          </Text>\n          <Text\n            fontSize={theme.font.size[200]}\n            lineHeight={theme.lineHeight[0]}\n          >\n            {attachment.title || \"Untitled\"}\n          </Text>\n        </div>\n        <Flex>\n          <Button.Outline\n            color=\"GRAY3\"\n            style={{ padding: \"0.25em 0.5em\" }}\n            onClick={() => download(attachment.filename)}\n          >\n            Download\n          </Button.Outline>\n          <Button.Outline\n            color=\"GRAY3\"\n            style={{ padding: \"0.25em 0.5em\" }}\n            onClick={removeAttachmentHandler}\n          >\n            Delete\n          </Button.Outline>\n        </Flex>\n      </Flow>\n    </StyledAttachment>\n  );\n};\n\nexport default Attachment;\n","import { useMutation } from \"@apollo/client\";\nimport React, { useState } from \"react\";\nimport styled, { useTheme } from \"styled-components\";\nimport * as Gql from \"../../gqlTypes\";\nimport {\n  CreateAttachmentInput,\n  CREATE_FILE_ATTACHMENT,\n} from \"../../graphql/mutation\";\nimport { CARD } from \"../../graphql/query\";\nimport useVisibility from \"../../hooks/useVisiblity\";\nimport { Flow, Flex, Icon, Button, Text, Relative } from \"../common\";\nimport { Color } from \"../common/Button\";\nimport InfoLabel from \"../common/InfoLabel\";\nimport Attachment from \"./Attachment\";\n\nconst StyledFileInput = styled(Flow)<Color>`\n  position: absolute;\n  background-color: white;\n  z-index: 7;\n  width: 25em;\n  padding: 2em;\n  margin-top: 1em;\n  border: 1px solid #e0e0e0;\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.05);\n  border-radius: 12px;\n  & input[type=\"file\"]::file-selector-button {\n    font: inherit;\n    cursor: pointer;\n    border-radius: ${({ theme }) => theme.border.radius[1]};\n    background-color: hsl(\n      ${({ backgroundColor, theme }) =>\n        backgroundColor && theme.color[backgroundColor]\n          ? theme.color[backgroundColor]\n          : theme.color.BLUE1}\n    );\n    color: hsl(${({ theme }) => theme.color.WHITE});\n    border: 0;\n    line-height: ${({ theme }) => theme.lineHeight[0]};\n    padding: 0.3em 0.75em;\n  }\n`;\n\nconst AttachmentSection = ({\n  attachments,\n  cardId,\n}: {\n  attachments: Gql.Attachment[];\n  cardId: string;\n}) => {\n  const [visible, setVisibility] = useVisibility();\n  const [createAttachment] = useMutation<\n    { createFileAttachment: Gql.Attachment },\n    CreateAttachmentInput\n  >(CREATE_FILE_ATTACHMENT, {\n    refetchQueries: [{ query: CARD, variables: { id: cardId } }],\n  });\n  const [state, setState] = useState<File | null>();\n  const theme = useTheme();\n\n  const handleUploadFile = () => {\n    createAttachment({\n      variables: {\n        data: {\n          cardId,\n          file: state,\n        },\n      },\n    });\n    setVisibility();\n    setState(null);\n  };\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) =>\n    e.target.validity.valid && setState(e.target.files?.item(0));\n  const toggleVisibility = () => {\n    setVisibility();\n    setState(null);\n  };\n\n  return (\n    <Flow>\n      <Flex>\n        <InfoLabel text=\"Attachments\">\n          <Icon.AttachFile />\n        </InfoLabel>\n        <Relative>\n          <Button.Outline\n            color=\"GRAY3\"\n            style={{ padding: \"0.25em 1em\" }}\n            onClick={toggleVisibility}\n          >\n            <Icon.Add style={{ fontSize: theme.font.size[200] }} />\n            <Text>Add</Text>\n          </Button.Outline>\n          {visible && (\n            <StyledFileInput>\n              <Text>Add an attachment</Text>\n              <div\n                style={{\n                  backgroundColor: state\n                    ? `hsl(${theme.color.GREEN3})`\n                    : undefined,\n                  padding: \"1em\",\n                  borderRadius: \"8px\",\n                }}\n              >\n                <input type=\"file\" onChange={onChange} />\n              </div>\n              <Button.Colored\n                style={{ padding: \"0.5em 1em\" }}\n                onClick={handleUploadFile}\n              >\n                Upload\n              </Button.Colored>\n            </StyledFileInput>\n          )}\n        </Relative>\n      </Flex>\n      {attachments.map((attachment) => (\n        <Attachment\n          key={attachment.title}\n          attachment={attachment}\n          cardId={cardId}\n        />\n      ))}\n    </Flow>\n  );\n};\n\nexport default AttachmentSection;\n","import React from \"react\";\nimport { Flow } from \"../common\";\nimport * as Gql from \"../../gqlTypes\";\nimport DescriptionSection from \"./DescriptionSection\";\nimport CommentSection from \"./CommentSection\";\nimport AttachmentSection from \"./AttachmentSection\";\n\nconst Main = ({ card }: { card: Gql.Card }) => {\n  return (\n    <Flow space=\"2em\" style={{ flex: \"3\" }}>\n      <DescriptionSection card={card} />\n      <AttachmentSection attachments={card.attachments} cardId={card.id} />\n      <CommentSection\n        cardId={card.id}\n        comments={card.comments}\n        cardAuthor={card.author.id}\n      />\n    </Flow>\n  );\n};\n\nexport default Main;\n","import { useState } from \"react\";\n\nconst useInput = (type: string) => {\n  const [value, setValue] = useState<string>(\"\");\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) =>\n    setValue(e.target.value);\n\n  return { type, value, onChange };\n};\n\nexport default useInput;\n","import axios, { AxiosRequestConfig } from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDebounce } from \"use-debounce/lib\";\nimport useInput from \"../../hooks/useInput\";\nimport { REACT_APP_UNSPLASH_API } from \"../../utils/config\";\nimport { Absolute, Button, Flow, Icon, InputGroup, Text } from \"../common\";\n\ninterface ApiResult {\n  urls: Record<string, string>;\n}\n\nconst CoverModal = ({ addCover }: { addCover: (photo: string) => void }) => {\n  const photoFilterController = useInput(\"text\");\n  const [value] = useDebounce(photoFilterController.value, 500);\n  const auth = {\n    headers: {\n      \"Accept-Version\": \"v1\",\n      Authorization: `Client-ID ${REACT_APP_UNSPLASH_API}`,\n    },\n  };\n\n  const [photos, setPhotos] = useState<ApiResult[\"urls\"][]>([]);\n  useEffect(() => {\n    console.log(\"trigger\");\n    axios\n      .get(\n        `https://api.unsplash.com/photos/random?count=12&content_filter=low&query=${value}`,\n        auth as AxiosRequestConfig<unknown>\n      )\n      .then(({ data }: { data: ApiResult[] }) => {\n        setPhotos(data.map((obj) => obj.urls));\n      });\n  }, [value[0]]);\n\n  return (\n    <Absolute\n      style={{\n        zIndex: 100,\n        backgroundColor: \"white\",\n        marginTop: \"1em\",\n        boxShadow: \"0px 2px 4px rgba(0, 0, 0, 0.05)\",\n        borderRadius: \"12px\",\n        border: \"1px solid #E0E0E0\",\n        padding: \"1.5em 0.75em\",\n      }}\n    >\n      <Flow>\n        <div>\n          <Text>Photo Search</Text>\n          <Text>Search Unsplash for photos</Text>\n        </div>\n        <InputGroup\n          props={{ placeholder: \"Keywords...\", ...photoFilterController }}\n          width=\"100%\"\n        >\n          <Button.Squared>\n            <Icon.Search />\n          </Button.Squared>\n        </InputGroup>\n        <div\n          style={{\n            display: \"grid\",\n            gridTemplateColumns: \"repeat(4, 50px)\",\n            gap: \"0.5rem\",\n          }}\n        >\n          {photos.map((photo) => (\n            <div\n              onClick={() => addCover(photo.regular)}\n              key={photo.thumb}\n              style={{\n                backgroundPosition: \"cover\",\n                backgroundImage: `url(${photo.thumb as string})`,\n                aspectRatio: \"1\",\n                borderRadius: \"4px\",\n                cursor: \"pointer\",\n              }}\n            ></div>\n          ))}\n        </div>\n      </Flow>\n    </Absolute>\n  );\n};\n\nexport default CoverModal;\n","export const { REACT_APP_UNSPLASH_API } = process.env;\n","import React, { useState } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { useTheme } from \"styled-components\";\nimport * as Gql from \"../../gqlTypes\";\nimport {\n  AddLabelInput,\n  ADD_LABEL,\n  CreateLabelInput,\n  CREATE_LABEL,\n} from \"../../graphql/mutation\";\nimport { Labels } from \"../Card/Utils\";\nimport { Flow, Icon, Label, Button, Text, Flex } from \"../common\";\nimport InfoLabel from \"../common/InfoLabel\";\nimport { CARD } from \"../../graphql/query\";\nimport { useParams } from \"react-router-dom\";\n\nconst previewDefault = { text: \"New label\", color: Gql.Color.BLUE1 };\n\nconst LabelModal = ({\n  cardId,\n  available,\n  active,\n}: {\n  available: Gql.Label[];\n  active: Gql.Label[];\n  cardId: string;\n}) => {\n  const { id } = useParams();\n  if (!id) return null;\n  const theme = useTheme();\n  const [addLabel] = useMutation<{ addLabel: Gql.Card }, AddLabelInput>(\n    ADD_LABEL,\n    { refetchQueries: [{ query: CARD, variables: { id: cardId } }] }\n  );\n  const [createLabel] = useMutation<\n    { createLabel: Gql.Label },\n    CreateLabelInput\n  >(CREATE_LABEL, {\n    refetchQueries: [{ query: CARD, variables: { id: cardId } }],\n  });\n\n  const [preview, setPreview] = useState<{\n    text: string;\n    color: Gql.Color;\n  }>(previewDefault);\n  const addLabelHandler = (id: string) => {\n    addLabel({ variables: { data: { id, cardId } } });\n  };\n\n  const createLabelHandler = () => {\n    createLabel({\n      variables: {\n        data: { boardId: id, cardId, ...preview },\n      },\n    });\n    setPreview(previewDefault);\n  };\n\n  return (\n    <Flow\n      style={{\n        position: \"absolute\",\n        backgroundColor: \"white\",\n        padding: \"1em\",\n        border: \"1px solid #E0E0E0\",\n        boxShadow: \"0px 2px 4px rgba(0, 0, 0, 0.05)\",\n        zIndex: 7,\n        borderRadius: \"12px\",\n        marginTop: \"1em\",\n      }}\n    >\n      {/* Header */}\n      <div>\n        <Text>Label</Text>\n        <Text>Select a name and a color</Text>\n      </div>\n\n      {/* Label previewer */}\n      {preview.text.length > 0 && (\n        <div>\n          <InfoLabel text=\"Preview\">\n            <Icon.Label />\n          </InfoLabel>\n          <Flex>\n            <Label color={preview.color}>{preview.text}</Label>\n          </Flex>\n        </div>\n      )}\n\n      {/* Labels */}\n      <div style={{ filter: \"drop-shadow(rgba(0, 0, 0, 0.1) 0px 4px 12px)\" }}>\n        <input\n          type=\"text\"\n          style={{\n            width: \"100%\",\n            outline: 0,\n            border: 0,\n            padding: \"0.5rem 0.75rem\",\n            borderRadius: \"8px\",\n            fontSize: \"10px\",\n            lineHeight: \"15px\",\n          }}\n          placeholder=\"Label...\"\n          onChange={({ target }) =>\n            setPreview({ ...preview, text: target.value })\n          }\n          value={preview.text}\n        />\n      </div>\n      <div\n        style={{\n          display: \"grid\",\n          grid: \"repeat(3, 2.5rem) / repeat(4, 4rem)\",\n          gap: \"0.5em\",\n        }}\n      >\n        {Object.keys(Gql.Color).map((color) => (\n          <button\n            key={color}\n            style={{\n              backgroundColor: `hsl(${theme.color[color]})`,\n              outline: 0,\n              border: 0,\n              borderRadius: \"4px\",\n            }}\n            onClick={() =>\n              setPreview({\n                ...preview,\n                color: color as Gql.Color,\n              })\n            }\n          ></button>\n        ))}\n      </div>\n\n      <Flow style={{ alignItems: \"center\" }} space=\"0.5em\">\n        {available.length > 0 && (\n          <>\n            <InfoLabel text=\"Available\">\n              <Icon.Label />\n            </InfoLabel>\n            <Labels style={{ gap: \"1em\" }}>\n              {available.map((label) => (\n                <Label\n                  color={label.color}\n                  key={label.id}\n                  onClick={() => addLabelHandler(label.id)}\n                >\n                  {label.text}\n                </Label>\n              ))}\n            </Labels>\n          </>\n        )}\n        {active.length > 0 && (\n          <>\n            <InfoLabel text=\"Active\">\n              <Icon.Label />\n            </InfoLabel>\n            <Labels style={{ gap: \"1em\" }}>\n              {active.map((label) => (\n                <Label\n                  color={label.color}\n                  key={label.id}\n                  onClick={() => addLabelHandler(label.id)}\n                >\n                  {label.text}\n                </Label>\n              ))}\n            </Labels>\n          </>\n        )}\n        <div style={{ textAlign: \"center\", paddingTop: \"1em\" }}>\n          <Button.Colored\n            style={{ padding: \"0.75em 2em\" }}\n            onClick={createLabelHandler}\n          >\n            Add\n          </Button.Colored>\n        </div>\n      </Flow>\n    </Flow>\n  );\n};\n\nexport default LabelModal;\n","import React from \"react\";\nimport useVisibility from \"../../hooks/useVisiblity\";\nimport { Flow, Icon, Button, Absolute, Text } from \"../common\";\nimport InfoLabel from \"../common/InfoLabel\";\nimport InviteFriend from \"../InviteFriend\";\nimport User from \"../User\";\nimport CoverModal from \"./CoverModal\";\nimport LabelModal from \"./LabelModal\";\nimport * as Gql from \"../../gqlTypes\";\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { CARD, Data, MASTER } from \"../../graphql/query\";\nimport styled from \"styled-components\";\nimport {\n  AddMemberInput,\n  ADD_MEMBER,\n  CreateCardInput,\n  CREATE_CARD,\n} from \"../../graphql/mutation\";\nimport { useParams } from \"react-router-dom\";\n\nconst Aside = ({\n  card,\n  removeCardHandler,\n}: {\n  card: Gql.Card;\n  removeCardHandler: (id: string) => void;\n}) => {\n  const { id } = useParams();\n  if (!id) return null;\n\n  const [showLabel, setShowLabel] = useVisibility();\n  const [showCover, setShowCover] = useVisibility();\n\n  const { data } = useQuery<Data, { id: string }>(MASTER, {\n    variables: { id },\n    fetchPolicy: \"cache-only\",\n  });\n  if (!data) return null;\n  const labelIds = card.labels.map((label) => label.id);\n  const availableLabels = data?.board.labels.filter(\n    (label) => labelIds.indexOf(label.id) === -1\n  );\n  const [addCover] = useMutation<{ createCard: Gql.Card }, CreateCardInput>(\n    CREATE_CARD,\n    { refetchQueries: [{ query: CARD, variables: { id: card.id } }] }\n  );\n\n  const addCoverHandler = (photo: string) => {\n    addCover({\n      variables: {\n        data: {\n          id: card.id,\n          listId: card.list.id,\n          boardId: id,\n          coverId: photo,\n        },\n      },\n    });\n  };\n\n  return (\n    <Flow style={{ flex: 1 }}>\n      {/* Label */}\n      <InfoLabel text=\"Actions\">\n        <Icon.AccountCircle />\n      </InfoLabel>\n      {/* Members */}\n      <Members card={card} />\n      {/* Labels */}\n      <div style={{ position: \"relative\" }}>\n        <Button.Icon\n          onClick={setShowLabel}\n          style={{\n            width: \"100%\",\n          }}\n        >\n          <Icon.Label />\n          <Text>Labels</Text>\n        </Button.Icon>\n        {showLabel && (\n          <LabelModal\n            cardId={card.id}\n            available={availableLabels}\n            active={card.labels}\n          />\n        )}\n      </div>\n      {/* Covers */}\n      <div style={{ position: \"relative\" }}>\n        <Button.Icon\n          onClick={setShowCover}\n          style={{\n            width: \"100%\",\n          }}\n        >\n          <Icon.Image />\n          <Text>Cover</Text>\n        </Button.Icon>\n        {showCover && <CoverModal addCover={addCoverHandler} />}\n      </div>\n      <Button.IconColored\n        backgroundColor=\"RED\"\n        color=\"RED\"\n        onClick={() => removeCardHandler(card.id)}\n      >\n        Delete\n        <Icon.Delete />\n      </Button.IconColored>\n    </Flow>\n  );\n};\n\nconst Members = ({ card }: { card: Gql.Card }) => {\n  const { id } = useParams();\n  if (!id) return null;\n  const [showMember, setShowMember] = useVisibility();\n  const { data } = useQuery<Data, { id: string }>(MASTER, {\n    variables: { id },\n    fetchPolicy: \"cache-only\",\n  });\n\n  if (!data) return null;\n\n  return (\n    <>\n      <Button.Icon\n        onClick={setShowMember}\n        style={{\n          width: \"100%\",\n        }}\n      >\n        <Icon.People />\n        <Text>Members</Text>\n      </Button.Icon>\n      {showMember && <CardMemberList card={card} />}\n    </>\n  );\n};\n\nconst StyledInviteMemberWrapper = styled(Absolute)`\n  background-color: hsl(${({ theme }) => theme.color.WHITE});\n  padding: 1em;\n  width: 20rem;\n  margin: 1em 0;\n  border: 1px solid hsl(${({ theme }) => theme.color.GRAY5});\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.05);\n  border-radius: ${({ theme }) => theme.border.radius[2]};\n  z-index: ${({ theme }) => theme.z.CARD_POPUP};\n`;\n\nconst CardMemberList = ({ card }: { card: Gql.Card }) => {\n  const { id } = useParams();\n  if (!id) return null;\n  const [showAddMember, setShowAddMember] = useVisibility();\n  const [addMember] = useMutation<{ addMember: Gql.Card }, AddMemberInput>(\n    ADD_MEMBER,\n    {\n      refetchQueries: [{ query: CARD, variables: { id: card.id } }],\n    }\n  );\n\n  const addMemberHandler = (ids: string[]) => {\n    addMember({ variables: { data: { cardId: card.id, members: ids } } });\n    setShowAddMember();\n  };\n  return (\n    <Flow>\n      {card.members.map((member: Gql.User) => (\n        <User user={member} key={member.id} />\n      ))}\n      <Button.IconColored onClick={setShowAddMember}>\n        Assign a member\n        <Icon.Add />\n      </Button.IconColored>\n      {showAddMember && (\n        <StyledInviteMemberWrapper>\n          <InviteFriend action={addMemberHandler} />\n        </StyledInviteMemberWrapper>\n      )}\n    </Flow>\n  );\n};\n\nexport default Aside;\n","import { useMutation, useQuery } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport { useTheme } from \"styled-components\";\nimport { Flex, Flow } from \"../common\";\nimport { CARD, Data, MASTER } from \"../../graphql/query\";\nimport * as Gql from \"../../gqlTypes\";\nimport Header from \"./Header\";\nimport Main from \"./Main\";\nimport Aside from \"./Aside\";\nimport { REMOVE_CARD } from \"../../graphql/mutation\";\nimport { useParams } from \"react-router-dom\";\n\nconst CardModal = ({\n  setVisibility,\n  id,\n}: {\n  setVisibility: () => void;\n  id: string;\n}) => {\n  const { id: boardId } = useParams();\n  if (!boardId) return null;\n  const theme = useTheme();\n  const { data } = useQuery<{ card: Gql.Card }, { id: string }>(CARD, {\n    variables: { id },\n  });\n  const ctx = useQuery<Data, { id: string }>(MASTER, {\n    variables: { id: boardId },\n    fetchPolicy: \"cache-only\",\n  });\n\n  const [card, setCard] = useState<Gql.Card | undefined>();\n  const [removeCard] = useMutation(REMOVE_CARD, {\n    refetchQueries: [{ query: MASTER, variables: { id: boardId } }],\n  });\n\n  const removeCardHandler = (id: string) => {\n    removeCard({ variables: { id } });\n    setVisibility();\n  };\n\n  useEffect(() => {\n    if (data) {\n      setCard(data.card);\n    }\n  }, [data]);\n\n  if (!(card && ctx.data)) return null;\n\n  return (\n    <div\n      style={{\n        margin: \"0\",\n        backgroundColor: `hsl(${theme.color.DARK} / 0.1)`,\n        position: \"fixed\",\n        inset: \"0\",\n        zIndex: theme.z.CARD,\n        overflowY: \"scroll\",\n      }}\n    >\n      <Flow\n        space=\"0.5em\"\n        style={{\n          borderRadius: \"8px\",\n          boxShadow: \"0px 2px 4px rgba(0, 0, 0, 0.05)\",\n          backgroundColor: \"white\",\n          margin: \"1em auto\",\n          width: \"50%\",\n          padding: \"2em 1.75em\",\n        }}\n      >\n        {/* Header */}\n        <Header setVisibility={setVisibility} card={card} />\n        {/* Card Content */}\n        <Flex>\n          <Main card={card} />\n          <Aside card={card} removeCardHandler={removeCardHandler} />\n        </Flex>\n      </Flow>\n    </div>\n  );\n};\n\nexport default CardModal;\n","import React from \"react\";\nimport * as Gql from \"../../gqlTypes\";\nimport Avatars from \"../Avatars\";\nimport { Button, Flex, Icon, Label } from \"../common\";\nimport { Cover, Labels, StatusBar, Title } from \"./Utils\";\nimport StyledCard from \"./StyledCard\";\nimport InfoLabel from \"../common/InfoLabel\";\nimport useVisibility from \"../../hooks/useVisiblity\";\nimport CardModal from \"../CardModal\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport styled from \"styled-components\";\n\nconst CardWrapper = styled.div``;\n\nconst Card = ({ card, index }: { card: Gql.Card; index: number }) => {\n  const [visibility, setVisibility] = useVisibility();\n\n  return (\n    <div>\n      <Draggable draggableId={card.id} index={index}>\n        {(provided, snapshot) => (\n          <CardWrapper\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}\n            ref={provided.innerRef}\n            onClick={setVisibility}\n          >\n            <StyledCard isDragging={snapshot.isDragging}>\n              {card.coverId && <Cover src={card.coverId} />}\n              <Title>{card.title}</Title>\n              <Labels>\n                {card.labels.map((label) => (\n                  <Label color={label.color} key={label.id}>\n                    {label.text}\n                  </Label>\n                ))}\n              </Labels>\n\n              <StatusBar>\n                {/* Avatars */}\n                <Avatars members={card.members}>\n                  <Button.Squared>\n                    <Icon.Add />\n                  </Button.Squared>\n                </Avatars>\n                {/* InfoLabel */}\n                <Flex space=\"0.5rem\">\n                  {card.comments.length > 0 && (\n                    <InfoLabel text={card.comments.length}>\n                      <Icon.Comment />\n                    </InfoLabel>\n                  )}\n                  {card.attachments.length > 0 && (\n                    <InfoLabel text={card.attachments.length}>\n                      <Icon.AttachFile />\n                    </InfoLabel>\n                  )}\n                </Flex>\n              </StatusBar>\n            </StyledCard>\n          </CardWrapper>\n        )}\n      </Draggable>\n      {visibility && <CardModal setVisibility={setVisibility} id={card.id} />}\n    </div>\n  );\n};\n\nexport default Card;\n","import styled from \"styled-components\";\nimport { Flex } from \"../common\";\n\nexport default styled(Flex)`\n  flex-direction: column;\n  justify-content: space-between;\n`;\n","import { useMutation } from \"@apollo/client\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport {\n  ChangeListNameInput,\n  CHANGE_LIST_NAME,\n  DeleteListInput,\n  DELETE_LIST,\n} from \"../../graphql/mutation\";\nimport { MASTER } from \"../../graphql/query\";\nimport useVisibility from \"../../hooks/useVisiblity\";\nimport { Absolute, Button, InputGroup, Relative, Text, Icon } from \"../common\";\nimport StyledListOperation from \"./StyledListOperation\";\nimport * as Gql from \"../../gqlTypes\";\nimport useInput from \"../../hooks/useInput\";\nimport { useParams } from \"react-router-dom\";\n\nconst ListOperation = ({ list }: { list: Gql.List }) => {\n  const { id } = useParams();\n  if (!id) return null;\n  const [rename, setRename] = useVisibility();\n  const controller = useInput(\"text\");\n  const [changeListName] = useMutation<\n    { changeListName: Gql.List },\n    ChangeListNameInput\n  >(CHANGE_LIST_NAME, {\n    refetchQueries: [{ query: MASTER, variables: { id } }],\n  });\n  const [deleteList] = useMutation<{ deleteList: boolean }, DeleteListInput>(\n    DELETE_LIST,\n    {\n      refetchQueries: [{ query: MASTER, variables: { id } }],\n    }\n  );\n\n  const handleChangeListName = () => {\n    changeListName({\n      variables: {\n        data: {\n          name: controller.value,\n          listId: list.id,\n        },\n      },\n    });\n    setRename();\n  };\n\n  const handleDeleteList = () =>\n    deleteList({ variables: { data: { id: list.id } } });\n\n  return (\n    <StyledListOperation space=\"0.25em\">\n      <Relative>\n        <GrayText onClick={setRename}>Rename</GrayText>\n        {rename && (\n          <Absolute style={{ marginTop: \"1em\" }}>\n            <InputGroup\n              width=\"100%\"\n              props={{ ...controller, style: { fontSize: \"1.25em\" } }}\n            >\n              <Button.Squared onClick={handleChangeListName}>\n                <Icon.Edit />\n              </Button.Squared>\n            </InputGroup>\n          </Absolute>\n        )}\n      </Relative>\n      <StyledSeparator />\n      <GrayText onClick={handleDeleteList}>Delete this list</GrayText>\n    </StyledListOperation>\n  );\n};\n\nexport const GrayText = styled(Text)`\n  color: hsl(${({ theme }) => theme.color.GRAY3});\n  font-size: ${({ theme }) => theme.font.size[200]};\n  line-height: ${({ theme }) => theme.lineHeight[0]};\n  cursor: pointer;\n`;\n\nconst StyledSeparator = styled.hr`\n  border: 0;\n  width: 100%;\n  height: ${({ theme }) => theme.font.size[1]};\n  background-color: hsl(${({ theme }) => theme.color.GRAY5});\n`;\n\nexport default ListOperation;\n","import React from \"react\";\nimport { useTheme } from \"styled-components\";\nimport { Icon } from \"../common\";\nimport ListOperation from \"../ListOperation\";\nimport Toggle from \"../Toggle\";\nimport * as Gql from \"../../gqlTypes\";\n\nconst ListOperationModal = ({ list }: { list: Gql.List }) => {\n  const theme = useTheme();\n  const ToggleStyle = {\n    style: {\n      zIndex: theme.z.BOARD_POPUP,\n      backgroundColor: `hsl(${theme.color.WHITE})`,\n      minWidth: \"13em\",\n      padding: \"1em\",\n      border: \"1px solid #E0E0E0\",\n      boxShadow: \"0px 2px 4px rgba(0, 0, 0, 0.05)\",\n      borderRadius: theme.border.radius[2],\n    },\n  };\n  return (\n    <Toggle props={ToggleStyle}>\n      <Icon.MoreHoriz />\n      <ListOperation list={list} />\n    </Toggle>\n  );\n};\n\nexport default ListOperationModal;\n","import React from \"react\";\nimport { useTheme } from \"styled-components\";\nimport { Flex, Text, Relative } from \"../common\";\nimport ListOperationModal from \"./ListOperationModal\";\nimport * as Gql from \"../../gqlTypes\";\n\nconst Header = ({ list }: { list: Gql.List }) => {\n  const theme = useTheme();\n\n  return (\n    <Relative>\n      <Flex style={{ alignItems: \"center\", justifyContent: \"space-between\" }}>\n        <Text lineHeight={theme.lineHeight[2]} fontSize={theme.font.size[400]}>\n          {list.name}\n        </Text>\n        <ListOperationModal list={list} />\n      </Flex>\n    </Relative>\n  );\n};\n\nexport default Header;\n","import { useMutation } from \"@apollo/client\";\nimport React from \"react\";\nimport styled, { useTheme } from \"styled-components\";\nimport { CreateCardInput, CREATE_CARD } from \"../../graphql/mutation\";\nimport { MASTER } from \"../../graphql/query\";\nimport useTextArea from \"../../hooks/useTextArea\";\nimport { Button, Flow, TextArea, Text } from \"../common\";\nimport * as Gql from \"../../gqlTypes\";\nimport { useParams } from \"react-router-dom\";\n\nconst StyledNewCard = styled(Flow)`\n  background-color: hsl(${({ theme }) => theme.color.WHITE});\n  border: 1px solid hsl(${({ theme }) => theme.color.GRAY5});\n  border-radius: ${({ theme }) => theme.border.radius[2]};\n  box-shadow: 0px 2px 8px rgba(0, 0, 0, 0.1);\n  padding: 1em;\n  max-width: 100%;\n  font-size: ${({ theme }) => theme.font.size[400]};\n`;\n\nconst NewCard = ({\n  listId,\n  setVisibility,\n}: {\n  listId: string;\n  setVisibility: () => void;\n}) => {\n  const { id } = useParams();\n  if (!id) return null;\n  const theme = useTheme();\n  const controller = useTextArea();\n  const [create] = useMutation<{ createCard: Gql.Card }, CreateCardInput>(\n    CREATE_CARD,\n    {\n      refetchQueries: [\n        {\n          query: MASTER,\n          fetchPolicy: \"network-only\",\n          variables: { id },\n        },\n      ],\n    }\n  );\n\n  const createCard = () => {\n    create({\n      variables: {\n        data: {\n          title: controller.value,\n          listId,\n          boardId: id,\n        },\n      },\n    });\n    setVisibility();\n  };\n\n  return (\n    <StyledNewCard>\n      <TextArea {...controller} placeholder=\"Enter a title for this card...\" />\n      <Button.Colored\n        backgroundColor=\"GREEN1\"\n        style={{ padding: \"0.4em 1em\" }}\n        onClick={createCard}\n      >\n        <Text\n          fontFamily={theme.font.family.secondary}\n          fontSize={theme.font.size[200]}\n        >\n          Save\n        </Text>\n      </Button.Colored>\n    </StyledNewCard>\n  );\n};\n\nexport default NewCard;\n","import styled from \"styled-components\";\n\n// for some unknown reason I can set the max and min width\n// if I set the actual width, it can't display the right size\n\nexport default styled.div`\n  z-index: ${({ theme }) => theme.z.POPUP};\n  min-width: 20em;\n  max-width: 20em;\n`;\n","import React from \"react\";\nimport { Droppable } from \"react-beautiful-dnd\";\nimport * as Gql from \"../../gqlTypes\";\nimport useVisibility from \"../../hooks/useVisiblity\";\nimport Card from \"../Card\";\nimport { Button, Flow, Icon } from \"../common\";\nimport Header from \"./Header\";\nimport NewCard from \"./NewCard\";\nimport StyledList from \"./StyledList\";\n\nconst List = ({ list }: { list: Gql.List }) => {\n  const [newCard, setNewCard] = useVisibility();\n\n  return (\n    <StyledList>\n      <Flow>\n        <Header list={list} />\n        <Droppable droppableId={list.id}>\n          {(provided) => (\n            <Flow ref={provided.innerRef} {...provided.droppableProps}>\n              {list.cards.map((card, index) => (\n                <Card key={card.id} card={card} index={index} />\n              ))}\n              {provided.placeholder}\n            </Flow>\n          )}\n        </Droppable>\n\n        {newCard && <NewCard listId={list.id} setVisibility={setNewCard} />}\n        <Button.IconColored onClick={setNewCard}>\n          {newCard ? (\n            <>\n              Close\n              <Icon.Close />\n            </>\n          ) : (\n            <>\n              Add another card\n              <Icon.Add />\n            </>\n          )}\n        </Button.IconColored>\n      </Flow>\n    </StyledList>\n  );\n};\n\nexport default List;\n","import styled from \"styled-components\";\n\nexport default styled.main`\n  display: flex;\n  gap: 1em;\n  margin-inline: 2em;\n  padding: 2em;\n  overflow-x: scroll;\n  background-color: hsl(${({ theme }) => theme.color.WHITE1});\n  border-radius: ${({ theme }) => theme.border.radius[3]};\n  margin-bottom: 1em;\n`;\n","import { useMutation } from \"@apollo/client\";\nimport React from \"react\";\nimport { CreateListInput, CREATE_LIST } from \"../../graphql/mutation\";\nimport { MASTER } from \"../../graphql/query\";\nimport useInput from \"../../hooks/useInput\";\nimport { Absolute, InputGroup, Button, Icon } from \"../common\";\nimport * as Gql from \"../../gqlTypes\";\nimport { useParams } from \"react-router-dom\";\n\nconst NewList = ({ setVisible }: { setVisible: () => void }) => {\n  const { id } = useParams();\n  if (!id) return null;\n  const inputController = useInput(\"text\");\n\n  const [createList] = useMutation<{ createList: Gql.List }, CreateListInput>(\n    CREATE_LIST,\n    {\n      refetchQueries: [\n        {\n          query: MASTER,\n          variables: { id },\n        },\n      ],\n    }\n  );\n\n  const createListHandler = () => {\n    createList({\n      variables: {\n        data: {\n          name: inputController.value,\n          boardId: id,\n        },\n      },\n    });\n    setVisible();\n  };\n\n  return (\n    <Absolute style={{ width: \"100%\", marginTop: \"1em\" }}>\n      <InputGroup\n        width=\"100%\"\n        props={{ ...inputController, style: { fontSize: \"1.25em\" } }}\n      >\n        <Button.Squared onClick={createListHandler}>\n          <Icon.Add />\n        </Button.Squared>\n      </InputGroup>\n    </Absolute>\n  );\n};\n\nexport default NewList;\n","import React from \"react\";\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { MASTER, Var } from \"../../graphql/query\";\nimport * as Gql from \"../../gqlTypes\";\nimport List from \"../List\";\nimport StyledKanban from \"./StyledKanban\";\nimport { Button, Icon, Relative } from \"../common\";\nimport { CHANGE_LIST } from \"../../graphql/mutation\";\nimport useVisibility from \"../../hooks/useVisiblity\";\nimport NewList from \"./NewList\";\nimport { DragDropContext, DropResult } from \"react-beautiful-dnd\";\nimport { useParams } from \"react-router-dom\";\n\nconst Kanban = () => {\n  const { id } = useParams();\n  if (!id) return null;\n  const { data: ctx } = useQuery<{ board: Gql.Board }, Var>(MASTER, {\n    fetchPolicy: \"cache-and-network\",\n    variables: { id },\n  });\n\n  const [changeList] = useMutation<\n    { changeList: Gql.Card },\n    { data: { cardId: string; listId: string } }\n  >(CHANGE_LIST, {\n    refetchQueries: [{ query: MASTER, variables: { id } }],\n  });\n\n  const [visible, setVisible] = useVisibility();\n\n  const onDrop = (result: DropResult) => {\n    const { draggableId: cardId, destination } = result;\n    const listId = destination?.droppableId;\n    if (!listId) return;\n    changeList({ variables: { data: { cardId, listId } } });\n  };\n\n  return (\n    <DragDropContext onDragEnd={onDrop}>\n      <StyledKanban>\n        {ctx?.board.lists.map((list: Gql.List) => (\n          <List key={list.id} list={list} />\n        ))}\n        <Relative style={{ minWidth: \"20em\" }}>\n          <Button.IconColored onClick={setVisible}>\n            {visible ? (\n              <>\n                Close\n                <Icon.Close />\n              </>\n            ) : (\n              <>\n                Add another List\n                <Icon.Add />\n              </>\n            )}\n          </Button.IconColored>\n          {visible && <NewList setVisible={setVisible} />}\n        </Relative>\n      </StyledKanban>\n    </DragDropContext>\n  );\n};\n\nexport default Kanban;\n","import styled from \"styled-components\";\n\nexport default styled.nav`\n  display: grid;\n  padding: 1em 2em;\n  grid-template-columns: min-content max-content auto max-content;\n  gap: 3em;\n  box-shadow: 0px 2px 2px hsl(${({ theme }) => theme.color.DARK} / 0.05);\n  &,\n  & > * {\n    align-items: center;\n  }\n\n  & .navigation-info {\n    margin-left: 5em;\n  }\n`;\n","import styled from \"styled-components\";\n\nconst StyledHr = styled.hr`\n  width: ${({ theme }) => theme.font.size[1]};\n  height: 2.5em;\n  border: ${({ theme }) => theme.font.size[1]} solid\n    hsl(${({ theme }) => theme.color.GRAY5});\n  background-color: hsl(${({ theme }) => theme.color.GRAY5});\n`;\n\nexport default StyledHr;\n","import { useQuery } from \"@apollo/client\";\nimport * as Gql from \"../gqlTypes\";\nimport { ME } from \"../graphql/query\";\n\nconst useUser = () => {\n  const { data: ctx } = useQuery<{ authorizedUser: Gql.User }>(ME, {\n    fetchPolicy: \"cache-and-network\",\n  });\n\n  if (!ctx) return undefined;\n  return ctx.authorizedUser;\n};\n\nexport default useUser;\n","import React, { ChangeEvent } from \"react\";\nimport { useApolloClient, useMutation, useQuery } from \"@apollo/client\";\nimport { Data, MASTER, Var } from \"../../graphql/query\";\nimport useInput from \"../../hooks/useInput\";\nimport { useTheme } from \"styled-components\";\nimport { ReactComponent as Logo } from \"../../assets/Logo.svg\";\nimport { Avatar, Button, Flex, Icon, InputGroup, Text } from \"../common\";\nimport StyledNavigation from \"./StyledNavigation\";\nimport Separator from \"./Separator\";\nimport * as Gql from \"../../gqlTypes\";\nimport { BoardInput, CHANGE_TITLE } from \"../../graphql/mutation\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { removeState } from \"../../utils/localStorage\";\nimport useUser from \"../../hooks/useUser\";\n\nconst Navigation = () => {\n  const { id } = useParams();\n  const apolloClient = useApolloClient();\n  const navigate = useNavigate();\n  const ctx = id\n    ? useQuery<Data, Var>(MASTER, {\n        fetchPolicy: \"cache-and-network\",\n        variables: { id },\n      })\n    : undefined;\n  const logout = () => {\n    removeState(\"token\");\n    apolloClient.resetStore();\n    navigate(\"../login\");\n  };\n  const user = useUser();\n  const searchController = useInput(\"text\");\n  const theme = useTheme();\n  const [changeTitle] = useMutation<{ createBoard: Gql.Board }, BoardInput>(\n    CHANGE_TITLE,\n    {\n      refetchQueries: [{ query: MASTER, variables: { id } }],\n    }\n  );\n\n  const handleTitleChange = (e: ChangeEvent<HTMLParagraphElement>) =>\n    changeTitle({\n      variables: {\n        data: {\n          title: e.target.outerText,\n          id,\n        },\n      },\n    });\n\n  // if (!ctx || !ctx.data) return null;\n  return (\n    <StyledNavigation>\n      <Logo className=\"navigation-logo\" onClick={() => navigate(\"/\")} />\n\n      {/* Board Name + Back to boards */}\n      {id && (\n        <Flex space=\"1em\" className=\"navigation-info\">\n          <Text\n            style={{ outline: 0 }}\n            fontSize={theme.font.size[600]}\n            lineHeight={theme.lineHeight[3]}\n            contentEditable\n            suppressContentEditableWarning\n            onBlur={handleTitleChange}\n          >\n            {ctx?.data?.board.title}\n          </Text>\n          <Separator />\n          <Button.Icon onClick={() => navigate(\"/\")}>\n            <Icon.Apps />\n            <Text>All boards</Text>\n          </Button.Icon>\n        </Flex>\n      )}\n\n      {/* Search bar */}\n      <InputGroup\n        props={{\n          ...searchController,\n          placeholder: \"Keyword...\",\n        }}\n        wrapper={{\n          className: \"navigation-input\",\n          style: {\n            justifySelf: \"end\",\n            gridColumn: \"3\",\n          },\n        }}\n        width=\"30em\"\n      >\n        <Button.Colored style={{ padding: \"0.75em 1.5em\" }}>\n          Search\n        </Button.Colored>\n      </InputGroup>\n\n      {/* User */}\n      {user && (\n        <Flex space=\"0.25em\" className=\"navigation-user\">\n          <Avatar id={user.avatar || \"\"} username={user.username || \"\"} />\n          <Text\n            fontFamily={theme.font.family.secondary}\n            fontWeight=\"bold\"\n            lineHeight={theme.lineHeight[0]}\n          >\n            {user.username}\n          </Text>\n          <Icon.Logout style={{ fontSize: \"1.5em\" }} onClick={logout} />\n        </Flex>\n      )}\n    </StyledNavigation>\n  );\n};\n\nexport default Navigation;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Infobar from \"../components/Infobar\";\nimport Kanban from \"../components/Kanban\";\nimport Navigation from \"../components/Navigation\";\n\nexport const Container = styled.div`\n  margin: 2em auto;\n  width: 80vw;\n  min-height: 80vh;\n  border-radius: ${({ theme }) => theme.border.radius[1]};\n  background-color: hsl(${({ theme }) => theme.color.WHITE});\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Board = () => {\n  return (\n    <Container>\n      <Navigation />\n      <Infobar />\n      <Kanban />\n    </Container>\n  );\n};\n\nexport default Board;\n","import React, { useState } from \"react\";\nimport styled, { useTheme } from \"styled-components\";\nimport { Button, Text, Flow } from \"../components/common\";\nimport { ReactComponent as Logo } from \"../assets/Logo.svg\";\nimport useInput from \"../hooks/useInput\";\nimport { useMutation } from \"@apollo/client\";\nimport { LOGIN } from \"../graphql/mutation\";\nimport { saveState } from \"../utils/localStorage\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport const LoginContainer = styled(Flow)`\n  margin: 10em auto;\n  width: min(25em, 30vw);\n  aspect-ratio: 4/5;\n  padding: 3em 0;\n  border-radius: ${({ theme }) => theme.border.radius[1]};\n  background-color: hsl(${({ theme }) => theme.color.WHITE});\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  align-items: center;\n  font-size: ${({ theme }) => theme.font.size[400]};\n`;\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, auto);\n  gap: 1em;\n  align-items: center;\n\n  & input {\n    outline: 0;\n    border: 0;\n  }\n`;\n\nconst Login = () => {\n  const navigate = useNavigate();\n  const usernameController = useInput(\"text\");\n  const passwordController = useInput(\"password\");\n  const [error, setError] = useState(false);\n  let id: NodeJS.Timeout;\n\n  const showError = () => {\n    clearTimeout(id);\n    setError(true);\n    id = setTimeout(() => setError(false), 3000);\n  };\n\n  const [login] = useMutation<\n    { login: { value: string } },\n    { data: { username: string; password: string } }\n  >(LOGIN);\n\n  const loginHandler = async () => {\n    try {\n      const { data, errors } = await login({\n        variables: {\n          data: {\n            username: usernameController.value,\n            password: passwordController.value,\n          },\n        },\n      });\n      if (!data || errors) return showError();\n      saveState(\"token\", data.login);\n    } catch {\n      return showError();\n    }\n\n    return navigate(\"/\");\n  };\n\n  const theme = useTheme();\n  return (\n    <LoginContainer space=\"2em\">\n      <Logo />\n      <Flow className=\"header\" style={{ textAlign: \"center\", width: \"80%\" }}>\n        <Text\n          fontSize={theme.font.size[500]}\n          fontFamily={theme.font.family.secondary}\n        >\n          Join thousands of learners from around the world{\" \"}\n        </Text>\n        <Text fontWeight=\"bold\">Login to create your first project!</Text>\n        {error && (\n          <Button.Colored\n            backgroundColor=\"RED\"\n            style={{\n              width: \"100%\",\n              padding: \"0.5em\",\n            }}\n          >\n            Invalid credentials\n          </Button.Colored>\n        )}\n      </Flow>\n      <Grid>\n        <Text>Username</Text>\n        <input {...usernameController} placeholder=\"Username\" />\n        <Text>Password</Text>\n        <input {...passwordController} placeholder=\"Password\" />\n      </Grid>\n      <Button.Colored\n        style={{ padding: \"0.5em 1em\", fontSize: theme.font.size[400] }}\n        onClick={loginHandler}\n      >\n        Login\n      </Button.Colored>\n    </LoginContainer>\n  );\n};\n\nexport default Login;\n","import React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport styled, { useTheme } from \"styled-components\";\nimport Avatars from \"../Avatars\";\nimport { Cover } from \"../Card/Utils\";\nimport { Flex, Text } from \"../common\";\nimport * as Gql from \"../../gqlTypes\";\n\nconst StyledBoard = styled(Flex)`\n  box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.05);\n  border-radius: 12px;\n  border: 1px #ededed solid;\n  width: 17em;\n  padding: 1em;\n  flex-direction: column;\n  justify-content: flex-end;\n  cursor: pointer;\n`;\n\nconst Board = ({ board }: { board: Gql.Board }) => {\n  const theme = useTheme();\n  const navigate = useNavigate();\n  return (\n    <>\n      <StyledBoard onClick={() => navigate(`./${board.id}`)}>\n        {board.coverId && <Cover src={board.coverId} />}\n        <Text\n          fontSize={theme.font.size[500]}\n          fontFamily={theme.font.family.secondary}\n        >\n          {board.title}\n        </Text>\n        {board.members.length < 4 ? (\n          <Avatars members={board.members.map((member) => member.user)} />\n        ) : (\n          <Avatars\n            members={board.members.slice(0, 3).map((member) => member.user)}\n          >\n            <Text color=\"GRAY4\" fontFamily={theme.font.family.secondary}>\n              + {board.members.length - 3} others\n            </Text>\n          </Avatars>\n        )}\n      </StyledBoard>\n    </>\n  );\n};\n\nexport default Board;\n","import { useMutation, useQuery } from \"@apollo/client\";\nimport React, { useState } from \"react\";\nimport styled, { useTheme } from \"styled-components\";\nimport {\n  Button,\n  Flex,\n  Flow,\n  Icon,\n  Text,\n  Absolute,\n  InputGroup,\n} from \"../components/common\";\nimport Navigation from \"../components/Navigation\";\nimport { ALL_BOARDS } from \"../graphql/query\";\nimport { Container } from \"./Board\";\nimport * as Gql from \"../gqlTypes\";\nimport Board from \"../components/Board\";\nimport useVisibility from \"../hooks/useVisiblity\";\nimport { Cover, StyledHeader } from \"../components/CardModal/Header\";\nimport CoverModal from \"../components/CardModal/CoverModal\";\nimport useInput from \"../hooks/useInput\";\nimport VisibilityBadge from \"../components/Infobar/Badge\";\nimport { BoardInput, CREATE_BOARD } from \"../graphql/mutation\";\nimport useUser from \"../hooks/useUser\";\n\nconst Home = () => {\n  const theme = useTheme();\n  const { data } = useQuery<{ allBoards: Gql.Board[] }>(ALL_BOARDS);\n  const [visible, setVisibility] = useVisibility();\n\n  return (\n    <>\n      <Container\n        style={{\n          pointerEvents: visible ? \"none\" : \"initial\",\n        }}\n      >\n        <Navigation />\n        <Flow\n          style={{\n            width: \"calc(80% + 2em)\",\n            margin: \"1em auto\",\n            padding: \"2em\",\n            borderRadius: \"12px\",\n            backgroundColor: `hsl(${theme.color.WHITE1})`,\n            minHeight: \"80vh\",\n            position: \"relative\",\n          }}\n        >\n          <Flex\n            style={{\n              justifyContent: \"space-between\",\n              alignItems: \"center\",\n            }}\n          >\n            <Text fontSize={theme.font.size[600]}>All Boards</Text>\n            <Button.IconColored\n              color=\"WHITE\"\n              style={{ backgroundColor: `hsl(${theme.color.BLUE1})` }}\n              onClick={setVisibility}\n            >\n              <Icon.Add />\n              Add\n            </Button.IconColored>\n          </Flex>\n          <Flex style={{ flexWrap: \"wrap\", justifyContent: \"space-between\" }}>\n            {data?.allBoards.map((board) => (\n              <Board key={board.id} board={board} />\n            ))}\n          </Flex>\n        </Flow>\n      </Container>\n      {visible && <CreateBoardModal setVisibility={setVisibility} />}\n    </>\n  );\n};\n\nconst StyledCreateBoardModal = styled(Absolute)`\n  position: fixed;\n  inset: 0;\n  background-color: hsl(${({ theme }) => theme.color.DARK} / 0.1);\n\n  & .container {\n    background-color: hsl(${({ theme }) => theme.color.WHITE});\n    width: 25%;\n    margin: 10em auto;\n    padding: 2em;\n    border-radius: ${({ theme }) => theme.border.radius[1]};\n  }\n`;\n\nconst CreateBoardModal = ({ setVisibility }: { setVisibility: () => void }) => {\n  const theme = useTheme();\n  const [showCover, setShowCover] = useVisibility();\n  const [cover, setCover] = useState<string>(\"\");\n  const titleController = useInput(\"text\");\n  const [boardVisibility, setBoardVisibility] = useState<Gql.Visibility>(\n    Gql.Visibility.PUBLIC\n  );\n  const user = useUser();\n  const [createBoard] = useMutation<{ createBoard: Gql.Board }, BoardInput>(\n    CREATE_BOARD,\n    {\n      refetchQueries: [{ query: ALL_BOARDS }],\n    }\n  );\n\n  const toggleVisibility = () => {\n    if (boardVisibility === Gql.Visibility.PRIVATE)\n      setBoardVisibility(Gql.Visibility.PUBLIC);\n    else setBoardVisibility(Gql.Visibility.PRIVATE);\n  };\n\n  const handleCreateBoard = () => {\n    createBoard({\n      variables: {\n        data: {\n          visibility: boardVisibility,\n          coverId: cover,\n          members: user ? [user.id] : undefined,\n          title: titleController.value,\n        },\n      },\n    });\n    setVisibility();\n  };\n\n  return (\n    <StyledCreateBoardModal>\n      <StyledHeader className=\"container\" hasCover={Boolean(cover)}>\n        <Button.Squared className=\"offset-button\" onClick={setVisibility}>\n          <Icon.Close />\n        </Button.Squared>\n        {cover && <Cover url={cover} />}\n\n        <InputGroup\n          width=\"100%\"\n          props={{\n            ...titleController,\n            placeholder: \"Add board title\",\n          }}\n          wrapper={{\n            style: {\n              border: \"1px solid #E0E0E0\",\n            },\n          }}\n        />\n        <Flex>\n          <div style={{ position: \"relative\", flex: \"1\" }}>\n            <Button.Icon onClick={setShowCover} style={{ width: \"100%\" }}>\n              <Icon.Image />\n              <Text>Cover</Text>\n            </Button.Icon>\n            {showCover && <CoverModal addCover={(url) => setCover(url)} />}\n          </div>\n          <div style={{ position: \"relative\", flex: \"1\" }}>\n            <VisibilityBadge\n              visibility={boardVisibility}\n              onClick={toggleVisibility}\n              style={{ width: \"100%\" }}\n            />\n          </div>\n        </Flex>\n        <Flex style={{ alignItems: \"center\", justifyContent: \"flex-end\" }}>\n          <Text onClick={setVisibility}>Cancel</Text>\n          <Button.IconColored\n            color=\"WHITE\"\n            style={{ backgroundColor: `hsl(${theme.color.BLUE1})` }}\n            onClick={handleCreateBoard}\n          >\n            <Icon.Add style={{ fontSize: \"1.5em\" }} />\n            <Text>Create</Text>\n          </Button.IconColored>\n        </Flex>\n      </StyledHeader>\n    </StyledCreateBoardModal>\n  );\n};\n\nexport default Home;\n","import React, { useEffect } from \"react\";\nimport { Routes, Route } from \"react-router-dom\";\nimport { loadState } from \"./utils/localStorage\";\nimport Board from \"./pages/Board\";\nimport Login from \"./pages/Login\";\nimport { useNavigate } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\n\nconst App = () => {\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const token = loadState(\"token\");\n    if (!token) navigate(\"login\");\n  }, []);\n\n  return (\n    <Routes>\n      <Route path=\"/\" element={<Home />} />\n      <Route path=\"login\" element={<Login />} />\n      <Route path=\":id\" element={<Board />} />\n    </Routes>\n  );\n};\n\nexport default App;\n","import { createGlobalStyle } from \"styled-components\";\n\nexport default createGlobalStyle`\n  *,\n  *::before,\n  *::after {\n    box-sizing: border-box;\n  }\n\n  /* Reset margins */\n  body,\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6,\n  p,\n  figure,\n  picture {\n    margin: 0;\n  }\n\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6,\n  p {\n    font-weight: 500;\n  }\n\n  a {\n    text-decoration: none;\n  }\n\n  body {\n    font-weight: 500;\n    letter-spacing: -0.035em;\n    line-height: ${({ theme }) => theme.lineHeight[1]};\n    font-family: ${({ theme }) => theme.font.family.normal};\n    font-size: ${({ theme }) => theme.font.size[300]};\n    background-color: hsl(${({ theme }) => theme.color.BLUE1});\n    color: hsl(${({ theme }) => theme.color.GRAY1});\n  }\n\n  ::placeholder { \n    color: hsl(${({ theme }) => theme.color.GRAY4});\n    opacity: 1;\n  }\n\n  img,\n  picture {\n    max-width: 100%;\n    display: block;\n  }\n\n  input,\n  button,\n  textarea,\n  select {\n    font: inherit;\n  }\n\n  svg {\n    cursor: pointer;\n  }\n\n  @media (prefers-reduced-motion: reduce) {\n    *,\n    *::before,\n    *::after {\n      animation-duration: 0.01ms !important;\n      animation-iteration-count: 1 !important;\n      transition-duration: 0.01ms !important;\n      scroll-behavior: auto !important;\n    }\n  }\n\n  .material-icons {\n    font-weight: inherit;\n    font-style: inherit;\n    line-height: inherit;\n    letter-spacing: inherit;\n    display: inline;\n    color: inherit;\n    cursor: pointer;\n  }\n`;\n","import { ApolloClient, InMemoryCache } from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { createUploadLink } from \"apollo-upload-client\";\nimport { loadState } from \"./localStorage\";\n\nconst uploadLink = createUploadLink({\n  uri: `http://localhost:${process.env.PORT || 4000}/graphql`,\n});\n\nconst ctx = setContext((_, { headers }) => {\n  const token = loadState(\"token\");\n  if (!token) return { headers };\n  return {\n    headers: {\n      ...headers,\n      authorization: `bearer ${token.value}`,\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: ctx.concat(uploadLink),\n  cache: new InMemoryCache(),\n});\n\nexport default client;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ApolloProvider } from \"@apollo/client\";\n\nimport App from \"./App\";\nimport { ThemeProvider } from \"styled-components\";\nimport Global from \"./style/global\";\nimport Theme from \"./style/theme\";\nimport client from \"./utils/apolloClient\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <ThemeProvider theme={Theme}>\n    <Global />\n    <ApolloProvider client={client}>\n      <Router>\n        <App />\n      </Router>\n    </ApolloProvider>\n  </ThemeProvider>,\n  document.querySelector(\"#root\")\n);\n"],"sourceRoot":""}